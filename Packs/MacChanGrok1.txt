--- FILE: MacChan.xcodeproj/xcuserdata/sircornealious.xcuserdatad/xcschemes/xcschememanagement.plist ---
BASE64: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+U2NoZW1lVXNlclN0YXRlPC9rZXk+Cgk8ZGljdD4KCQk8a2V5Pk1hY0NoYW4ueGNzY2hlbWVfXiNzaGFyZWQjXl88L2tleT4KCQk8ZGljdD4KCQkJPGtleT5vcmRlckhpbnQ8L2tleT4KCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQk8L2RpY3Q+Cgk8L2RpY3Q+CjwvZGljdD4KPC9wbGlzdD4K
--- END ---

--- FILE: MacChan/Persistence.swift ---
BASE64: Ly8KLy8gIFBlcnNpc3RlbmNlLnN3aWZ0Ci8vICBNYWNDaGFuCi8vCi8vICBDcmVhdGVkIGJ5IEphcmVkIE1heHdlbGwgb24gOS8zLzI1LgovLwoKaW1wb3J0IENvcmVEYXRhCgpzdHJ1Y3QgUGVyc2lzdGVuY2VDb250cm9sbGVyIHsKICAgIHN0YXRpYyBsZXQgc2hhcmVkID0gUGVyc2lzdGVuY2VDb250cm9sbGVyKCkKCiAgICBATWFpbkFjdG9yCiAgICBzdGF0aWMgbGV0IHByZXZpZXc6IFBlcnNpc3RlbmNlQ29udHJvbGxlciA9IHsKICAgICAgICBsZXQgcmVzdWx0ID0gUGVyc2lzdGVuY2VDb250cm9sbGVyKGluTWVtb3J5OiB0cnVlKQogICAgICAgIGxldCB2aWV3Q29udGV4dCA9IHJlc3VsdC5jb250YWluZXIudmlld0NvbnRleHQKICAgICAgICBmb3IgXyBpbiAwLi48MTAgewogICAgICAgICAgICBsZXQgbmV3SXRlbSA9IEl0ZW0oY29udGV4dDogdmlld0NvbnRleHQpCiAgICAgICAgICAgIG5ld0l0ZW0udGltZXN0YW1wID0gRGF0ZSgpCiAgICAgICAgfQogICAgICAgIGRvIHsKICAgICAgICAgICAgdHJ5IHZpZXdDb250ZXh0LnNhdmUoKQogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgICAvLyBSZXBsYWNlIHRoaXMgaW1wbGVtZW50YXRpb24gd2l0aCBjb2RlIHRvIGhhbmRsZSB0aGUgZXJyb3IgYXBwcm9wcmlhdGVseS4KICAgICAgICAgICAgLy8gZmF0YWxFcnJvcigpIGNhdXNlcyB0aGUgYXBwbGljYXRpb24gdG8gZ2VuZXJhdGUgYSBjcmFzaCBsb2cgYW5kIHRlcm1pbmF0ZS4gWW91IHNob3VsZCBub3QgdXNlIHRoaXMgZnVuY3Rpb24gaW4gYSBzaGlwcGluZyBhcHBsaWNhdGlvbiwgYWx0aG91Z2ggaXQgbWF5IGJlIHVzZWZ1bCBkdXJpbmcgZGV2ZWxvcG1lbnQuCiAgICAgICAgICAgIGxldCBuc0Vycm9yID0gZXJyb3IgYXMgTlNFcnJvcgogICAgICAgICAgICBmYXRhbEVycm9yKCJVbnJlc29sdmVkIGVycm9yIFwobnNFcnJvciksIFwobnNFcnJvci51c2VySW5mbykiKQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0CiAgICB9KCkKCiAgICBsZXQgY29udGFpbmVyOiBOU1BlcnNpc3RlbnRDb250YWluZXIKCiAgICBpbml0KGluTWVtb3J5OiBCb29sID0gZmFsc2UpIHsKICAgICAgICBjb250YWluZXIgPSBOU1BlcnNpc3RlbnRDb250YWluZXIobmFtZTogIk1hY0NoYW4iKQogICAgICAgIGlmIGluTWVtb3J5IHsKICAgICAgICAgICAgY29udGFpbmVyLnBlcnNpc3RlbnRTdG9yZURlc2NyaXB0aW9ucy5maXJzdCEudXJsID0gVVJMKGZpbGVVUkxXaXRoUGF0aDogIi9kZXYvbnVsbCIpCiAgICAgICAgfQogICAgICAgIGNvbnRhaW5lci5sb2FkUGVyc2lzdGVudFN0b3Jlcyhjb21wbGV0aW9uSGFuZGxlcjogeyAoc3RvcmVEZXNjcmlwdGlvbiwgZXJyb3IpIGluCiAgICAgICAgICAgIGlmIGxldCBlcnJvciA9IGVycm9yIGFzIE5TRXJyb3I/IHsKICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhpcyBpbXBsZW1lbnRhdGlvbiB3aXRoIGNvZGUgdG8gaGFuZGxlIHRoZSBlcnJvciBhcHByb3ByaWF0ZWx5LgogICAgICAgICAgICAgICAgLy8gZmF0YWxFcnJvcigpIGNhdXNlcyB0aGUgYXBwbGljYXRpb24gdG8gZ2VuZXJhdGUgYSBjcmFzaCBsb2cgYW5kIHRlcm1pbmF0ZS4gWW91IHNob3VsZCBub3QgdXNlIHRoaXMgZnVuY3Rpb24gaW4gYSBzaGlwcGluZyBhcHBsaWNhdGlvbiwgYWx0aG91Z2ggaXQgbWF5IGJlIHVzZWZ1bCBkdXJpbmcgZGV2ZWxvcG1lbnQuCgogICAgICAgICAgICAgICAgLyoKICAgICAgICAgICAgICAgICBUeXBpY2FsIHJlYXNvbnMgZm9yIGFuIGVycm9yIGhlcmUgaW5jbHVkZToKICAgICAgICAgICAgICAgICAqIFRoZSBwYXJlbnQgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0LCBjYW5ub3QgYmUgY3JlYXRlZCwgb3IgZGlzYWxsb3dzIHdyaXRpbmcuCiAgICAgICAgICAgICAgICAgKiBUaGUgcGVyc2lzdGVudCBzdG9yZSBpcyBub3QgYWNjZXNzaWJsZSwgZHVlIHRvIHBlcm1pc3Npb25zIG9yIGRhdGEgcHJvdGVjdGlvbiB3aGVuIHRoZSBkZXZpY2UgaXMgbG9ja2VkLgogICAgICAgICAgICAgICAgICogVGhlIGRldmljZSBpcyBvdXQgb2Ygc3BhY2UuCiAgICAgICAgICAgICAgICAgKiBUaGUgc3RvcmUgY291bGQgbm90IGJlIG1pZ3JhdGVkIHRvIHRoZSBjdXJyZW50IG1vZGVsIHZlcnNpb24uCiAgICAgICAgICAgICAgICAgQ2hlY2sgdGhlIGVycm9yIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGFjdHVhbCBwcm9ibGVtIHdhcy4KICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgZmF0YWxFcnJvcigiVW5yZXNvbHZlZCBlcnJvciBcKGVycm9yKSwgXChlcnJvci51c2VySW5mbykiKQogICAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICBjb250YWluZXIudmlld0NvbnRleHQuYXV0b21hdGljYWxseU1lcmdlc0NoYW5nZXNGcm9tUGFyZW50ID0gdHJ1ZQogICAgfQp9Cg==
--- END ---

--- FILE: MacChan/MacChanApp.swift ---
BASE64: Ly8KLy8gIE1hY0NoYW5BcHAuc3dpZnQKLy8gIE1hY0NoYW4KLy8KLy8gIENyZWF0ZWQgYnkgSmFyZWQgTWF4d2VsbCBvbiA5LzMvMjUuCi8vCgppbXBvcnQgU3dpZnRVSQppbXBvcnQgQ2xvdWRLaXQKCkBtYWluCnN0cnVjdCBNYWNDaGFuQXBwOiBBcHAgewogICAgQFN0YXRlT2JqZWN0IHByaXZhdGUgdmFyIGNsb3VkS2l0TWFuYWdlciA9IENsb3VkS2l0TWFuYWdlci5zaGFyZWQKICAgIEBTdGF0ZU9iamVjdCBwcml2YXRlIHZhciBhdXRoTWFuYWdlciA9IEF1dGhlbnRpY2F0aW9uTWFuYWdlci5zaGFyZWQKICAgIEBTdGF0ZU9iamVjdCBwcml2YXRlIHZhciBub3RpZmljYXRpb25NYW5hZ2VyID0gTm90aWZpY2F0aW9uTWFuYWdlci5zaGFyZWQKICAgIEBTdGF0ZU9iamVjdCBwcml2YXRlIHZhciBtZXNzYWdlTWFuYWdlciA9IE1lc3NhZ2VNYW5hZ2VyLnNoYXJlZAogICAgCiAgICBsZXQgcGVyc2lzdGVuY2VDb250cm9sbGVyID0gUGVyc2lzdGVuY2VDb250cm9sbGVyLnNoYXJlZAoKICAgIHZhciBib2R5OiBzb21lIFNjZW5lIHsKICAgICAgICBXaW5kb3dHcm91cCB7CiAgICAgICAgICAgIENvbnRlbnRWaWV3KCkKICAgICAgICAgICAgICAgIC5lbnZpcm9ubWVudChcLm1hbmFnZWRPYmplY3RDb250ZXh0LCBwZXJzaXN0ZW5jZUNvbnRyb2xsZXIuY29udGFpbmVyLnZpZXdDb250ZXh0KQogICAgICAgICAgICAgICAgLmVudmlyb25tZW50T2JqZWN0KGNsb3VkS2l0TWFuYWdlcikKICAgICAgICAgICAgICAgIC5lbnZpcm9ubWVudE9iamVjdChhdXRoTWFuYWdlcikKICAgICAgICAgICAgICAgIC5lbnZpcm9ubWVudE9iamVjdChub3RpZmljYXRpb25NYW5hZ2VyKQogICAgICAgICAgICAgICAgLmVudmlyb25tZW50T2JqZWN0KG1lc3NhZ2VNYW5hZ2VyKQogICAgICAgICAgICAgICAgLm9uQXBwZWFyIHsKICAgICAgICAgICAgICAgICAgICBUYXNrIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2V0dXBBcHAoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAKICAgIHByaXZhdGUgZnVuYyBzZXR1cEFwcCgpIGFzeW5jIHsKICAgICAgICAvLyBSZXF1ZXN0IG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9ucwogICAgICAgIF8gPSBhd2FpdCBub3RpZmljYXRpb25NYW5hZ2VyLnJlcXVlc3ROb3RpZmljYXRpb25QZXJtaXNzaW9uKCkKICAgICAgICAKICAgICAgICAvLyBSZWdpc3RlciBmb3IgcmVtb3RlIG5vdGlmaWNhdGlvbnMKICAgICAgICBub3RpZmljYXRpb25NYW5hZ2VyLnJlZ2lzdGVyRm9yUmVtb3RlTm90aWZpY2F0aW9ucygpCiAgICAgICAgCiAgICAgICAgLy8gU2V0dXAgQ2xvdWRLaXQgc3Vic2NyaXB0aW9ucwogICAgICAgIGF3YWl0IG5vdGlmaWNhdGlvbk1hbmFnZXIuc2V0dXBDbG91ZEtpdFN1YnNjcmlwdGlvbnMoKQogICAgICAgIAogICAgICAgIC8vIENoZWNrIGF1dGhlbnRpY2F0aW9uIHN0YXR1cwogICAgICAgIGF1dGhNYW5hZ2VyLmNoZWNrQXV0aGVudGljYXRpb25TdGF0dXMoKQogICAgfQp9Cg==
--- END ---

--- FILE: MacChan/MacChan.entitlements ---
BASE64: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+YXBzLWVudmlyb25tZW50PC9rZXk+Cgk8c3RyaW5nPmRldmVsb3BtZW50PC9zdHJpbmc+Cgk8a2V5PmNvbS5hcHBsZS5kZXZlbG9wZXIuYXBwbGVzaWduaW48L2tleT4KCTxhcnJheT4KCQk8c3RyaW5nPkRlZmF1bHQ8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PmNvbS5hcHBsZS5kZXZlbG9wZXIuYXBzLWVudmlyb25tZW50PC9rZXk+Cgk8c3RyaW5nPmRldmVsb3BtZW50PC9zdHJpbmc+Cgk8a2V5PmNvbS5hcHBsZS5kZXZlbG9wZXIuaWNsb3VkLWNvbnRhaW5lci1pZGVudGlmaWVyczwva2V5PgoJPGFycmF5PgoJCTxzdHJpbmc+aUNsb3VkLm1hY2NoYW50ZXN0MTwvc3RyaW5nPgoJPC9hcnJheT4KCTxrZXk+Y29tLmFwcGxlLmRldmVsb3Blci5pY2xvdWQtc2VydmljZXM8L2tleT4KCTxhcnJheT4KCQk8c3RyaW5nPkNsb3VkS2l0PC9zdHJpbmc+Cgk8L2FycmF5PgoJPGtleT5jb20uYXBwbGUuc2VjdXJpdHkuYXBwLXNhbmRib3g8L2tleT4KCTx0cnVlLz4KCTxrZXk+Y29tLmFwcGxlLnNlY3VyaXR5LmFzc2V0cy5tb3ZpZXMucmVhZC13cml0ZTwva2V5PgoJPHRydWUvPgoJPGtleT5jb20uYXBwbGUuc2VjdXJpdHkuYXNzZXRzLm11c2ljLnJlYWQtd3JpdGU8L2tleT4KCTx0cnVlLz4KCTxrZXk+Y29tLmFwcGxlLnNlY3VyaXR5LmFzc2V0cy5waWN0dXJlcy5yZWFkLXdyaXRlPC9rZXk+Cgk8dHJ1ZS8+Cgk8a2V5PmNvbS5hcHBsZS5zZWN1cml0eS5hdXRvbWF0aW9uLmFwcGxlLWV2ZW50czwva2V5PgoJPHRydWUvPgoJPGtleT5jb20uYXBwbGUuc2VjdXJpdHkuZGV2aWNlLmF1ZGlvLWlucHV0PC9rZXk+Cgk8dHJ1ZS8+Cgk8a2V5PmNvbS5hcHBsZS5zZWN1cml0eS5kZXZpY2UuYmx1ZXRvb3RoPC9rZXk+Cgk8dHJ1ZS8+Cgk8a2V5PmNvbS5hcHBsZS5zZWN1cml0eS5kZXZpY2UuY2FtZXJhPC9rZXk+Cgk8dHJ1ZS8+Cgk8a2V5PmNvbS5hcHBsZS5zZWN1cml0eS5maWxlcy5kb3dubG9hZHMucmVhZC13cml0ZTwva2V5PgoJPHRydWUvPgoJPGtleT5jb20uYXBwbGUuc2VjdXJpdHkuZmlsZXMudXNlci1zZWxlY3RlZC5yZWFkLXdyaXRlPC9rZXk+Cgk8dHJ1ZS8+Cgk8a2V5PmNvbS5hcHBsZS5zZWN1cml0eS5uZXR3b3JrLmNsaWVudDwva2V5PgoJPHRydWUvPgoJPGtleT5jb20uYXBwbGUuc2VjdXJpdHkubmV0d29yay5zZXJ2ZXI8L2tleT4KCTx0cnVlLz4KCTxrZXk+Y29tLmFwcGxlLnNlY3VyaXR5LnBlcnNvbmFsLWluZm9ybWF0aW9uLmFkZHJlc3Nib29rPC9rZXk+Cgk8dHJ1ZS8+Cgk8a2V5PmNvbS5hcHBsZS5zZWN1cml0eS5wZXJzb25hbC1pbmZvcm1hdGlvbi5jYWxlbmRhcnM8L2tleT4KCTx0cnVlLz4KCTxrZXk+Y29tLmFwcGxlLnNlY3VyaXR5LnBlcnNvbmFsLWluZm9ybWF0aW9uLmxvY2F0aW9uPC9rZXk+Cgk8dHJ1ZS8+Cgk8a2V5PmNvbS5hcHBsZS5zZWN1cml0eS5wZXJzb25hbC1pbmZvcm1hdGlvbi5waG90b3MtbGlicmFyeTwva2V5PgoJPHRydWUvPgoJPGtleT5jb20uYXBwbGUuc2VjdXJpdHkucHJpbnQ8L2tleT4KCTx0cnVlLz4KPC9kaWN0Pgo8L3BsaXN0Pgo=
--- END ---

--- FILE: MacChan/ContentView.swift ---
BASE64: aW1wb3J0IFN3aWZ0VUkKI2lmIG9zKGlPUykKaW1wb3J0IEF1dGhlbnRpY2F0aW9uU2VydmljZXMKI2VuZGlmCgpzdHJ1Y3QgQ29udGVudFZpZXc6IFZpZXcgewogICAgQEVudmlyb25tZW50T2JqZWN0IHByaXZhdGUgdmFyIGF1dGhNYW5hZ2VyOiBBdXRoZW50aWNhdGlvbk1hbmFnZXIKICAgIEBFbnZpcm9ubWVudE9iamVjdCBwcml2YXRlIHZhciBjbG91ZEtpdE1hbmFnZXI6IENsb3VkS2l0TWFuYWdlcgoKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIEdyb3VwIHsKICAgICAgICAgICAgaWYgYXV0aE1hbmFnZXIuaXNBdXRoZW50aWNhdGVkIHsKICAgICAgICAgICAgICAgIC8vIFVzZXIgaXMgYXV0aGVudGljYXRlZCwgc2hvdyBtYWluIHZpZXcKICAgICAgICAgICAgICAgIE1haW5Gb3J1bVZpZXcoKQogICAgICAgICAgICAgICAgICAgIC5hbGVydChjbG91ZEtpdE1hbmFnZXIubG9naW5FcnJvclRpdGxlLCBpc1ByZXNlbnRlZDogJGNsb3VkS2l0TWFuYWdlci5zaG93TG9naW5FcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICBCdXR0b24oIlRyeSBBZ2FpbiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3VkS2l0TWFuYWdlci5kaXNtaXNzTG9naW5FcnJvcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXRyeSB0aGUgQ2xvdWRLaXQgYXV0aGVudGljYXRpb24gcHJvY2VzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFzayB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xvdWRLaXRNYW5hZ2VyLmNoZWNrQWNjb3VudFN0YXR1cygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uKCJDb250aW51ZSBPZmZsaW5lIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvdWRLaXRNYW5hZ2VyLmRpc21pc3NMb2dpbkVycm9yKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IHVzZXIgdG8gY29udGludWUgd2l0aG91dCBDbG91ZEtpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvdWRLaXRNYW5hZ2VyLmlzU2lnbmVkSW4gPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uKCJTaWduIE91dCIsIHJvbGU6IC5kZXN0cnVjdGl2ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvdWRLaXRNYW5hZ2VyLmRpc21pc3NMb2dpbkVycm9yKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhNYW5hZ2VyLnNpZ25PdXQoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBtZXNzYWdlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIFRleHQoY2xvdWRLaXRNYW5hZ2VyLmxvZ2luRXJyb3JNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIFNob3cgYXV0aGVudGljYXRpb24gdmlldyB3aXRoIGVycm9yIGhhbmRsaW5nCiAgICAgICAgICAgICAgICBBdXRoZW50aWNhdGlvblZpZXcoKQogICAgICAgICAgICAgICAgICAgIC5hbGVydCgiQXV0aGVudGljYXRpb24gRXJyb3IiLCBpc1ByZXNlbnRlZDogLmNvbnN0YW50KGF1dGhNYW5hZ2VyLmVycm9yTWVzc2FnZSAhPSBuaWwpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbigiVHJ5IEFnYWluIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aE1hbmFnZXIuZXJyb3JNZXNzYWdlID0gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBhdXRvbWF0aWNhbGx5IHJldHJ5IC0gbGV0IHVzZXIgbWFudWFsbHkgdHJ5IGFnYWluCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uKCJDYW5jZWwiLCByb2xlOiAuY2FuY2VsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRoTWFuYWdlci5lcnJvck1lc3NhZ2UgPSBuaWwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gbWVzc2FnZTogewogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZXQgZXJyb3JNZXNzYWdlID0gYXV0aE1hbmFnZXIuZXJyb3JNZXNzYWdlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHQoZXJyb3JNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC5vbkFwcGVhciB7CiAgICAgICAgICAgIHNldHVwQXBwKCkKICAgICAgICB9CiAgICAgICAgLm92ZXJsYXkgewogICAgICAgICAgICBpZiBhdXRoTWFuYWdlci5pc0xvYWRpbmcgewogICAgICAgICAgICAgICAgUHJvZ3Jlc3NWaWV3KCJBdXRoZW50aWNhdGluZy4uLiIpCiAgICAgICAgICAgICAgICAgICAgLnBhZGRpbmcoKQojaWYgb3MoaU9TKQogICAgICAgICAgICAgICAgICAgIC5iYWNrZ3JvdW5kKENvbG9yKC5zeXN0ZW1CYWNrZ3JvdW5kKS5vcGFjaXR5KDAuOSkpCiNlbHNlCiAgICAgICAgICAgICAgICAgICAgLmJhY2tncm91bmQoQ29sb3IoLndpbmRvd0JhY2tncm91bmRDb2xvcikub3BhY2l0eSgwLjkpKQojZW5kaWYKICAgICAgICAgICAgICAgICAgICAuY29ybmVyUmFkaXVzKDEwKQogICAgICAgICAgICAgICAgICAgIC5zaGFkb3cocmFkaXVzOiAxMCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIGZ1bmMgc2V0dXBBcHAoKSB7CiNpZiBvcyhpT1MpCiAgICAgICAgVUlBcHBsaWNhdGlvbi5zaGFyZWQucmVnaXN0ZXJGb3JSZW1vdGVOb3RpZmljYXRpb25zKCkKI2Vsc2UKICAgICAgICBOU0FwcGxpY2F0aW9uLnNoYXJlZC5yZWdpc3RlckZvclJlbW90ZU5vdGlmaWNhdGlvbnMoKQojZW5kaWYKICAgIH0KfQoKc3RydWN0IEF1dGhlbnRpY2F0aW9uVmlldzogVmlldyB7CiAgICBARW52aXJvbm1lbnRPYmplY3QgcHJpdmF0ZSB2YXIgYXV0aE1hbmFnZXI6IEF1dGhlbnRpY2F0aW9uTWFuYWdlcgoKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIFZTdGFjayhzcGFjaW5nOiAyMCkgewogICAgICAgICAgICBUZXh0KCJXZWxjb21lIHRvIE1hY0NoYW4iKQogICAgICAgICAgICAgICAgLmZvbnQoLmxhcmdlVGl0bGUpCiAgICAgICAgICAgICAgICAuZm9udFdlaWdodCguYm9sZCkKCiAgICAgICAgICAgIFRleHQoIlNpZ24gaW4gd2l0aCBBcHBsZSB0byBjb250aW51ZSIpCiAgICAgICAgICAgICAgICAuZm9udCguaGVhZGxpbmUpCiAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5zZWNvbmRhcnkpCgojaWYgb3MoaU9TKQogICAgICAgICAgICBTaWduSW5XaXRoQXBwbGVCdXR0b24oLnNpZ25JbikgeyByZXF1ZXN0IGluCiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlcXVlc3RlZFNjb3BlcyA9IFsuZnVsbE5hbWUsIC5lbWFpbF0KICAgICAgICAgICAgfSBvbkNvbXBsZXRpb246IHsgcmVzdWx0IGluCiAgICAgICAgICAgICAgICBzd2l0Y2ggcmVzdWx0IHsKICAgICAgICAgICAgICAgIGNhc2UgLnN1Y2Nlc3MobGV0IGF1dGhvcml6YXRpb24pOgogICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBzdWNjZXNzZnVsIHNpZ24gaW4KICAgICAgICAgICAgICAgICAgICBpZiBsZXQgY3JlZGVudGlhbCA9IGF1dGhvcml6YXRpb24uY3JlZGVudGlhbCBhcz8gQVNBdXRob3JpemF0aW9uQXBwbGVJRENyZWRlbnRpYWwgewogICAgICAgICAgICAgICAgICAgICAgICBhdXRoTWFuYWdlci5oYW5kbGVTdWNjZXNzZnVsU2lnbkluKGNyZWRlbnRpYWw6IGNyZWRlbnRpYWwpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FzZSAuZmFpbHVyZShsZXQgZXJyb3IpOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJTaWduIGluIGZhaWxlZDogXChlcnJvci5sb2NhbGl6ZWREZXNjcmlwdGlvbikiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC5zaWduSW5XaXRoQXBwbGVCdXR0b25TdHlsZSguYmxhY2spCiAgICAgICAgICAgIC5mcmFtZShoZWlnaHQ6IDUwKQogICAgICAgICAgICAucGFkZGluZyguaG9yaXpvbnRhbCkKI2Vsc2UKICAgICAgICAgICAgQnV0dG9uKGFjdGlvbjogewogICAgICAgICAgICAgICAgYXV0aE1hbmFnZXIuc2lnbkluV2l0aEFwcGxlKCkKICAgICAgICAgICAgfSkgewogICAgICAgICAgICAgICAgSFN0YWNrIHsKICAgICAgICAgICAgICAgICAgICBJbWFnZShzeXN0ZW1OYW1lOiAiYXBwbGUubG9nbyIpCiAgICAgICAgICAgICAgICAgICAgVGV4dCgiU2lnbiBpbiB3aXRoIEFwcGxlIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC5wYWRkaW5nKCkKICAgICAgICAgICAgICAgIC5iYWNrZ3JvdW5kKENvbG9yLmJsYWNrKQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvcigud2hpdGUpCiAgICAgICAgICAgICAgICAuY29ybmVyUmFkaXVzKDgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLmJ1dHRvblN0eWxlKC5wbGFpbikKI2VuZGlmCiAgICAgICAgfQogICAgICAgIC5wYWRkaW5nKCkKI2lmIG9zKG1hY09TKQogICAgICAgIC5mcmFtZShtaW5XaWR0aDogMzAwLCBtaW5IZWlnaHQ6IDIwMCkKI2VuZGlmCiAgICB9Cn0K
--- END ---

--- FILE: MacChan/Info.plist ---
BASE64: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHBsaXN0IFBVQkxJQyAiLS8vQXBwbGUvL0RURCBQTElTVCAxLjAvL0VOIiAiaHR0cDovL3d3dy5hcHBsZS5jb20vRFREcy9Qcm9wZXJ0eUxpc3QtMS4wLmR0ZCI+CjxwbGlzdCB2ZXJzaW9uPSIxLjAiPgo8ZGljdD4KCTxrZXk+Q0ZCdW5kbGVJZGVudGlmaWVyPC9rZXk+Cgk8c3RyaW5nPk1hYy5DaGFuLk1hY0NoYW48L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVOYW1lPC9rZXk+Cgk8c3RyaW5nPk1hY0NoYW48L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVEaXNwbGF5TmFtZTwva2V5PgoJPHN0cmluZz5NYWNDaGFuPC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlVmVyc2lvbjwva2V5PgoJPHN0cmluZz4xPC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nPC9rZXk+Cgk8c3RyaW5nPjEuMDwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZUV4ZWN1dGFibGU8L2tleT4KCTxzdHJpbmc+JChFWEVDVVRBQkxFX05BTUUpPC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlSWNvbkZpbGU8L2tleT4KCTxzdHJpbmc+PC9zdHJpbmc+Cgk8a2V5PkNGQnVuZGxlUGFja2FnZVR5cGU8L2tleT4KCTxzdHJpbmc+QVBQTDwvc3RyaW5nPgoJPGtleT5DRkJ1bmRsZVN1cHBvcnRlZFBsYXRmb3Jtczwva2V5PgoJPGFycmF5PgoJCTxzdHJpbmc+TWFjT1NYPC9zdHJpbmc+Cgk8L2FycmF5PgoJPGtleT5DRkJ1bmRsZUluZm9EaWN0aW9uYXJ5VmVyc2lvbjwva2V5PgoJPHN0cmluZz42LjA8L3N0cmluZz4KCTxrZXk+Q0ZCdW5kbGVEZXZlbG9wbWVudFJlZ2lvbjwva2V5PgoJPHN0cmluZz5lbjwvc3RyaW5nPgoJPGtleT5OU0h1bWFuUmVhZGFibGVDb3B5cmlnaHQ8L2tleT4KCTxzdHJpbmc+Q29weXJpZ2h0IMKpIDIwMjUgSmFyZWQgTWF4d2VsbC4gQWxsIHJpZ2h0cyByZXNlcnZlZC48L3N0cmluZz4KCTxrZXk+TFNNaW5pbXVtU3lzdGVtVmVyc2lvbjwva2V5PgoJPHN0cmluZz4kKE1BQ09TWF9ERVBMT1lNRU5UX1RBUkdFVCk8L3N0cmluZz4KCTxrZXk+TlNBcHBUcmFuc3BvcnRTZWN1cml0eTwva2V5PgoJPGRpY3Q+CgkJPGtleT5OU0FsbG93c0FyYml0cmFyeUxvYWRzPC9rZXk+CgkJPHRydWUvPgoJPC9kaWN0PgoJPGtleT5OU1VzZXJOb3RpZmljYXRpb25BbGVydFN0eWxlPC9rZXk+Cgk8c3RyaW5nPmFsZXJ0PC9zdHJpbmc+CjwvZGljdD4KPC9wbGlzdD4K
--- END ---

--- FILE: MacChan/Managers/AttachmentManager.swift ---
BASE64: Ly8KLy8gIEF0dGFjaG1lbnRNYW5hZ2VyLnN3aWZ0Ci8vICBNYWNDaGFuCi8vCi8vICBOT1RFIFRPIERFVkVMT1BFUjogVGhpcyBmaWxlIGNvbnRhaW5zIGlPUy1zcGVjaWZpYyBjb2RlIChQaG90b3NVSSBmcmFtZXdvcmspLgovLyAgV2hlbiBhZGRpbmcgbmV3IGNvZGUsIGVuc3VyZSBpdCdzIGlPUy1jb21wYXRpYmxlIG9ubHkuIFVzZSBjb25kaXRpb25hbCBjb21waWxhdGlvbgovLyAgZm9yIG1hY09TIGFsdGVybmF0aXZlcyBpZiBuZWVkZWQuCi8vCi8vICBDcmVhdGVkIGJ5IEphcmVkIE1heHdlbGwgb24gOS8zLzI1LgovLwoKaW1wb3J0IEZvdW5kYXRpb24KaW1wb3J0IENsb3VkS2l0CmltcG9ydCBTd2lmdFVJCgpATWFpbkFjdG9yCmNsYXNzIEF0dGFjaG1lbnRNYW5hZ2VyOiBPYnNlcnZhYmxlT2JqZWN0IHsKICAgIHN0YXRpYyBsZXQgc2hhcmVkID0gQXR0YWNobWVudE1hbmFnZXIoKQogICAgCiAgICBAUHVibGlzaGVkIHZhciBpc1VwbG9hZGluZyA9IGZhbHNlCiAgICBAUHVibGlzaGVkIHZhciB1cGxvYWRQcm9ncmVzczogRG91YmxlID0gMC4wCiAgICBAUHVibGlzaGVkIHZhciBlcnJvck1lc3NhZ2U6IFN0cmluZz8KICAgIAogICAgcHJpdmF0ZSBsZXQgY2xvdWRLaXRNYW5hZ2VyID0gQ2xvdWRLaXRNYW5hZ2VyLnNoYXJlZAogICAgcHJpdmF0ZSBsZXQgbWF4RmlsZVNpemU6IEludDY0ID0gMTAgKiAxMDI0ICogMTAyNCAvLyAxME1CCiAgICBwcml2YXRlIGxldCBhbGxvd2VkSW1hZ2VUeXBlcyA9IFsiaW1hZ2UvanBlZyIsICJpbWFnZS9wbmciLCAiaW1hZ2UvZ2lmIiwgImltYWdlL3dlYnAiXQogICAgcHJpdmF0ZSBsZXQgYWxsb3dlZERvY3VtZW50VHlwZXMgPSBbImFwcGxpY2F0aW9uL3BkZiIsICJ0ZXh0L3BsYWluIiwgImFwcGxpY2F0aW9uL21zd29yZCIsICJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCJdCiAgICAKICAgIHByaXZhdGUgaW5pdCgpIHt9CiAgICAKICAgIGZ1bmMgdXBsb2FkSW1hZ2VEYXRhKF8gaW1hZ2VEYXRhOiBEYXRhLCBmaWxlbmFtZTogU3RyaW5nKSBhc3luYyB0aHJvd3MgLT4gQXR0YWNobWVudCB7CiAgICAgICAgcmV0dXJuIHRyeSBhd2FpdCB1cGxvYWRGaWxlKGRhdGE6IGltYWdlRGF0YSwgZmlsZW5hbWU6IGZpbGVuYW1lLCBtaW1lVHlwZTogImltYWdlL2pwZWciKQogICAgfQogICAgCiAgICBmdW5jIHVwbG9hZEZpbGUoZGF0YTogRGF0YSwgZmlsZW5hbWU6IFN0cmluZywgbWltZVR5cGU6IFN0cmluZykgYXN5bmMgdGhyb3dzIC0+IEF0dGFjaG1lbnQgewogICAgICAgIGd1YXJkIGRhdGEuY291bnQgPD0gbWF4RmlsZVNpemUgZWxzZSB7CiAgICAgICAgICAgIHRocm93IEF0dGFjaG1lbnRFcnJvci5maWxlVG9vTGFyZ2UKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZ3VhcmQgaXNBbGxvd2VkRmlsZVR5cGUobWltZVR5cGUpIGVsc2UgewogICAgICAgICAgICB0aHJvdyBBdHRhY2htZW50RXJyb3IudW5zdXBwb3J0ZWRGaWxlVHlwZQogICAgICAgIH0KICAgICAgICAKICAgICAgICBpc1VwbG9hZGluZyA9IHRydWUKICAgICAgICB1cGxvYWRQcm9ncmVzcyA9IDAuMAogICAgICAgIAogICAgICAgIGRvIHsKICAgICAgICAgICAgbGV0IGF0dGFjaG1lbnQgPSB0cnkgYXdhaXQgY2xvdWRLaXRNYW5hZ2VyLnVwbG9hZEF0dGFjaG1lbnQoZGF0YSwgZmlsZW5hbWU6IGZpbGVuYW1lLCBtaW1lVHlwZTogbWltZVR5cGUpCiAgICAgICAgICAgIHVwbG9hZFByb2dyZXNzID0gMS4wCiAgICAgICAgICAgIGlzVXBsb2FkaW5nID0gZmFsc2UKICAgICAgICAgICAgcmV0dXJuIGF0dGFjaG1lbnQKICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgICAgaXNVcGxvYWRpbmcgPSBmYWxzZQogICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAiVXBsb2FkIGZhaWxlZDogXChlcnJvci5sb2NhbGl6ZWREZXNjcmlwdGlvbikiCiAgICAgICAgICAgIHRocm93IGVycm9yCiAgICAgICAgfQogICAgfQogICAgCiAgICBmdW5jIGRvd25sb2FkQXR0YWNobWVudChfIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQpIGFzeW5jIHRocm93cyAtPiBEYXRhIHsKICAgICAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHlvdSdkIGRvd25sb2FkIGZyb20gQ2xvdWRLaXQKICAgICAgICAvLyBGb3Igbm93LCB3ZSdsbCByZXR1cm4gZW1wdHkgZGF0YQogICAgICAgIHJldHVybiBEYXRhKCkKICAgIH0KICAgIAogICAgZnVuYyBnZW5lcmF0ZVRodW1ibmFpbERhdGEoZnJvbSBpbWFnZURhdGE6IERhdGEsIHNpemU6IENHU2l6ZSA9IENHU2l6ZSh3aWR0aDogMTUwLCBoZWlnaHQ6IDE1MCkpIC0+IERhdGE/IHsKICAgICAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHlvdSdkIHVzZSBJbWFnZUlPIG9yIENvcmUgR3JhcGhpY3MgdG8gY3JlYXRlIHRodW1ibmFpbHMKICAgICAgICAvLyBGb3Igbm93LCB3ZSdsbCByZXR1cm4gdGhlIG9yaWdpbmFsIGRhdGEKICAgICAgICByZXR1cm4gaW1hZ2VEYXRhCiAgICB9CiAgICAKICAgIGZ1bmMgZm9ybWF0RmlsZVNpemUoXyBieXRlczogSW50NjQpIC0+IFN0cmluZyB7CiAgICAgICAgbGV0IGZvcm1hdHRlciA9IEJ5dGVDb3VudEZvcm1hdHRlcigpCiAgICAgICAgZm9ybWF0dGVyLmFsbG93ZWRVbml0cyA9IFsudXNlS0IsIC51c2VNQiwgLnVzZUdCXQogICAgICAgIGZvcm1hdHRlci5jb3VudFN0eWxlID0gLmZpbGUKICAgICAgICByZXR1cm4gZm9ybWF0dGVyLnN0cmluZyhmcm9tQnl0ZUNvdW50OiBieXRlcykKICAgIH0KICAgIAogICAgcHJpdmF0ZSBmdW5jIGlzQWxsb3dlZEZpbGVUeXBlKF8gbWltZVR5cGU6IFN0cmluZykgLT4gQm9vbCB7CiAgICAgICAgcmV0dXJuIGFsbG93ZWRJbWFnZVR5cGVzLmNvbnRhaW5zKG1pbWVUeXBlKSB8fCBhbGxvd2VkRG9jdW1lbnRUeXBlcy5jb250YWlucyhtaW1lVHlwZSkKICAgIH0KfQoKZW51bSBBdHRhY2htZW50RXJyb3I6IExvY2FsaXplZEVycm9yIHsKICAgIGNhc2UgaW52YWxpZEltYWdlRGF0YQogICAgY2FzZSBmaWxlVG9vTGFyZ2UKICAgIGNhc2UgdW5zdXBwb3J0ZWRGaWxlVHlwZQogICAgY2FzZSB1cGxvYWRGYWlsZWQKICAgIAogICAgdmFyIGVycm9yRGVzY3JpcHRpb246IFN0cmluZz8gewogICAgICAgIHN3aXRjaCBzZWxmIHsKICAgICAgICBjYXNlIC5pbnZhbGlkSW1hZ2VEYXRhOgogICAgICAgICAgICByZXR1cm4gIkludmFsaWQgaW1hZ2UgZGF0YSIKICAgICAgICBjYXNlIC5maWxlVG9vTGFyZ2U6CiAgICAgICAgICAgIHJldHVybiAiRmlsZSBpcyB0b28gbGFyZ2UuIE1heGltdW0gc2l6ZSBpcyAxME1CLiIKICAgICAgICBjYXNlIC51bnN1cHBvcnRlZEZpbGVUeXBlOgogICAgICAgICAgICByZXR1cm4gIlVuc3VwcG9ydGVkIGZpbGUgdHlwZSIKICAgICAgICBjYXNlIC51cGxvYWRGYWlsZWQ6CiAgICAgICAgICAgIHJldHVybiAiVXBsb2FkIGZhaWxlZCIKICAgICAgICB9CiAgICB9Cn0KCi8vIE1BUks6IC0gSW1hZ2UgUGlja2VyIChpT1Mgb25seSkKCiNpZiBvcyhpT1MpCmltcG9ydCBQaG90b3NVSQoKc3RydWN0IEltYWdlUGlja2VyOiBWaWV3IHsKICAgIEBCaW5kaW5nIHZhciBzZWxlY3RlZEltYWdlRGF0YTogRGF0YT8KICAgIEBTdGF0ZSBwcml2YXRlIHZhciBzZWxlY3RlZEl0ZW06IFBob3Rvc1BpY2tlckl0ZW0/CiAgICBARW52aXJvbm1lbnQoXC5kaXNtaXNzKSBwcml2YXRlIHZhciBkaXNtaXNzCiAgICAKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIE5hdmlnYXRpb25WaWV3IHsKICAgICAgICAgICAgVlN0YWNrIHsKICAgICAgICAgICAgICAgIFBob3Rvc1BpY2tlcihzZWxlY3Rpb246ICRzZWxlY3RlZEl0ZW0sIG1hdGNoaW5nOiAuaW1hZ2VzKSB7CiAgICAgICAgICAgICAgICAgICAgTGFiZWwoIlNlbGVjdCBJbWFnZSIsIHN5c3RlbUltYWdlOiAicGhvdG8iKQogICAgICAgICAgICAgICAgICAgICAgICAuZnJhbWUobWF4V2lkdGg6IC5pbmZpbml0eSkKICAgICAgICAgICAgICAgICAgICAgICAgLnBhZGRpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAuYmFja2dyb3VuZChDb2xvci5ibHVlKQogICAgICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC53aGl0ZSkKICAgICAgICAgICAgICAgICAgICAgICAgLmNvcm5lclJhZGl1cyg4KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLm9uQ2hhbmdlKG9mOiBzZWxlY3RlZEl0ZW0pIHsgbmV3SXRlbSBpbgogICAgICAgICAgICAgICAgICAgIFRhc2sgewogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZXQgZGF0YSA9IHRyeT8gYXdhaXQgbmV3SXRlbT8ubG9hZFRyYW5zZmVyYWJsZSh0eXBlOiBEYXRhLnNlbGYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW1hZ2VEYXRhID0gZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzbWlzcygpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLnBhZGRpbmcoKQogICAgICAgICAgICAubmF2aWdhdGlvblRpdGxlKCJTZWxlY3QgSW1hZ2UiKQogICAgICAgICAgICAubmF2aWdhdGlvbkJhclRpdGxlRGlzcGxheU1vZGUoLmlubGluZSkKICAgICAgICAgICAgLnRvb2xiYXIgewogICAgICAgICAgICAgICAgVG9vbGJhckl0ZW0ocGxhY2VtZW50OiAubmF2aWdhdGlvbkJhclRyYWlsaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgQnV0dG9uKCJDYW5jZWwiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc21pc3MoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQojZW5kaWYKCi8vIE1BUks6IC0gRG9jdW1lbnQgUGlja2VyIChDcm9zcy1wbGF0Zm9ybSkKCmltcG9ydCBVbmlmb3JtVHlwZUlkZW50aWZpZXJzCgpzdHJ1Y3QgRG9jdW1lbnRQaWNrZXI6IFZpZXcgewogICAgQEJpbmRpbmcgdmFyIHNlbGVjdGVkVVJMOiBVUkw/CiAgICBAU3RhdGUgcHJpdmF0ZSB2YXIgaXNQcmVzZW50ZWQgPSBmYWxzZQogICAgQEVudmlyb25tZW50KFwuZGlzbWlzcykgcHJpdmF0ZSB2YXIgZGlzbWlzcwogICAgCiAgICB2YXIgYm9keTogc29tZSBWaWV3IHsKICAgICAgICBCdXR0b24oIlNlbGVjdCBEb2N1bWVudCIpIHsKICAgICAgICAgICAgaXNQcmVzZW50ZWQgPSB0cnVlCiAgICAgICAgfQogICAgICAgIC5maWxlSW1wb3J0ZXIoCiAgICAgICAgICAgIGlzUHJlc2VudGVkOiAkaXNQcmVzZW50ZWQsCiAgICAgICAgICAgIGFsbG93ZWRDb250ZW50VHlwZXM6IFsuaXRlbV0sCiAgICAgICAgICAgIGFsbG93c011bHRpcGxlU2VsZWN0aW9uOiBmYWxzZQogICAgICAgICkgeyByZXN1bHQgaW4KICAgICAgICAgICAgc3dpdGNoIHJlc3VsdCB7CiAgICAgICAgICAgIGNhc2UgLnN1Y2Nlc3MobGV0IHVybHMpOgogICAgICAgICAgICAgICAgc2VsZWN0ZWRVUkwgPSB1cmxzLmZpcnN0CiAgICAgICAgICAgICAgICBkaXNtaXNzKCkKICAgICAgICAgICAgY2FzZSAuZmFpbHVyZToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
--- END ---

--- FILE: MacChan/Managers/AuthenticationManager.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Managers/NotificationManager.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Managers/MessageManager.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Managers/CloudKitManager.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Managers/OfflineManager.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Assets.xcassets/Contents.json ---
BASE64: ewogICJpbmZvIiA6IHsKICAgICJhdXRob3IiIDogInhjb2RlIiwKICAgICJ2ZXJzaW9uIiA6IDEKICB9Cn0K
--- END ---

--- FILE: MacChan/Assets.xcassets/AppIcon.appiconset/Contents.json ---
BASE64: ewogICJpbWFnZXMiIDogWwogICAgewogICAgICAiZmlsZW5hbWUiIDogIm1hY2NoYXR3YXZlLnBuZyIsCiAgICAgICJpZGlvbSIgOiAidW5pdmVyc2FsIiwKICAgICAgInBsYXRmb3JtIiA6ICJpb3MiLAogICAgICAic2l6ZSIgOiAiMTAyNHgxMDI0IgogICAgfSwKICAgIHsKICAgICAgImFwcGVhcmFuY2VzIiA6IFsKICAgICAgICB7CiAgICAgICAgICAiYXBwZWFyYW5jZSIgOiAibHVtaW5vc2l0eSIsCiAgICAgICAgICAidmFsdWUiIDogImRhcmsiCiAgICAgICAgfQogICAgICBdLAogICAgICAiZmlsZW5hbWUiIDogIm1hY2NoYXR3YXZlIDEucG5nIiwKICAgICAgImlkaW9tIiA6ICJ1bml2ZXJzYWwiLAogICAgICAicGxhdGZvcm0iIDogImlvcyIsCiAgICAgICJzaXplIiA6ICIxMDI0eDEwMjQiCiAgICB9LAogICAgewogICAgICAiYXBwZWFyYW5jZXMiIDogWwogICAgICAgIHsKICAgICAgICAgICJhcHBlYXJhbmNlIiA6ICJsdW1pbm9zaXR5IiwKICAgICAgICAgICJ2YWx1ZSIgOiAidGludGVkIgogICAgICAgIH0KICAgICAgXSwKICAgICAgImZpbGVuYW1lIiA6ICJtYWNjaGF0ZGFyayAxLnBuZyIsCiAgICAgICJpZGlvbSIgOiAidW5pdmVyc2FsIiwKICAgICAgInBsYXRmb3JtIiA6ICJpb3MiLAogICAgICAic2l6ZSIgOiAiMTAyNHgxMDI0IgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJtYWMiLAogICAgICAic2NhbGUiIDogIjF4IiwKICAgICAgInNpemUiIDogIjE2eDE2IgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJtYWMiLAogICAgICAic2NhbGUiIDogIjJ4IiwKICAgICAgInNpemUiIDogIjE2eDE2IgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJtYWMiLAogICAgICAic2NhbGUiIDogIjF4IiwKICAgICAgInNpemUiIDogIjMyeDMyIgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJtYWMiLAogICAgICAic2NhbGUiIDogIjJ4IiwKICAgICAgInNpemUiIDogIjMyeDMyIgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJtYWMiLAogICAgICAic2NhbGUiIDogIjF4IiwKICAgICAgInNpemUiIDogIjEyOHgxMjgiCiAgICB9LAogICAgewogICAgICAiaWRpb20iIDogIm1hYyIsCiAgICAgICJzY2FsZSIgOiAiMngiLAogICAgICAic2l6ZSIgOiAiMTI4eDEyOCIKICAgIH0sCiAgICB7CiAgICAgICJpZGlvbSIgOiAibWFjIiwKICAgICAgInNjYWxlIiA6ICIxeCIsCiAgICAgICJzaXplIiA6ICIyNTZ4MjU2IgogICAgfSwKICAgIHsKICAgICAgImlkaW9tIiA6ICJtYWMiLAogICAgICAic2NhbGUiIDogIjJ4IiwKICAgICAgInNpemUiIDogIjI1NngyNTYiCiAgICB9LAogICAgewogICAgICAiaWRpb20iIDogIm1hYyIsCiAgICAgICJzY2FsZSIgOiAiMXgiLAogICAgICAic2l6ZSIgOiAiNTEyeDUxMiIKICAgIH0sCiAgICB7CiAgICAgICJpZGlvbSIgOiAibWFjIiwKICAgICAgInNjYWxlIiA6ICIyeCIsCiAgICAgICJzaXplIiA6ICI1MTJ4NTEyIgogICAgfQogIF0sCiAgImluZm8iIDogewogICAgImF1dGhvciIgOiAieGNvZGUiLAogICAgInZlcnNpb24iIDogMQogIH0KfQo=
--- END ---

--- FILE: MacChan/Assets.xcassets/AccentColor.colorset/Contents.json ---
BASE64: ewogICJjb2xvcnMiIDogWwogICAgewogICAgICAiaWRpb20iIDogInVuaXZlcnNhbCIKICAgIH0KICBdLAogICJpbmZvIiA6IHsKICAgICJhdXRob3IiIDogInhjb2RlIiwKICAgICJ2ZXJzaW9uIiA6IDEKICB9Cn0K
--- END ---

--- FILE: MacChan/Utils/BBCodeParser.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Models/SharedModels.swift ---
BASE64: Ly8KLy8gIFNoYXJlZE1vZGVscy5zd2lmdAovLyAgTWFjQ2hhbgovLwovLyAgQ3JlYXRlZCBieSBKYXJlZCBNYXh3ZWxsIG9uIDkvMy8yNS4KLy8KCmltcG9ydCBGb3VuZGF0aW9uCgovLyBNQVJLOiAtIEZvcnVtIFN0YXRpc3RpY3MgTW9kZWwKc3RydWN0IEZvcnVtU3RhdGlzdGljcyB7CiAgICBsZXQgdG90YWxQb3N0czogSW50CiAgICBsZXQgdG90YWxUaHJlYWRzOiBJbnQKICAgIGxldCByZWdpc3RlcmVkVXNlcnM6IEludAogICAgbGV0IHRvdGFsRm9ydW1zOiBJbnQKICAgIGxldCBwb3N0c1RvZGF5OiBJbnQKICAgIGxldCBwb3N0c1RoaXNXZWVrOiBJbnQKICAgIGxldCBwb3N0c1RoaXNNb250aDogSW50CiAgICBsZXQgbmV3VXNlcnNUb2RheTogSW50CiAgICBsZXQgbW9zdEFjdGl2ZUZvcnVtOiBTdHJpbmcKICAgIGxldCBidXNpZXN0RGF5OiBTdHJpbmcKICAgIGxldCBhdmVyYWdlUG9zdHNQZXJEYXk6IEludAogICAgbGV0IHRvdGFsQXR0YWNobWVudHM6IEludAoKICAgIHN0YXRpYyBmdW5jIG1vY2tEYXRhKCkgLT4gRm9ydW1TdGF0aXN0aWNzIHsKICAgICAgICByZXR1cm4gRm9ydW1TdGF0aXN0aWNzKAogICAgICAgICAgICB0b3RhbFBvc3RzOiAxMjUwLAogICAgICAgICAgICB0b3RhbFRocmVhZHM6IDg5LAogICAgICAgICAgICByZWdpc3RlcmVkVXNlcnM6IDQ1LAogICAgICAgICAgICB0b3RhbEZvcnVtczogOCwKICAgICAgICAgICAgcG9zdHNUb2RheTogMjMsCiAgICAgICAgICAgIHBvc3RzVGhpc1dlZWs6IDE1NiwKICAgICAgICAgICAgcG9zdHNUaGlzTW9udGg6IDY3OCwKICAgICAgICAgICAgbmV3VXNlcnNUb2RheTogMywKICAgICAgICAgICAgbW9zdEFjdGl2ZUZvcnVtOiAiR2VuZXJhbCBEaXNjdXNzaW9uIiwKICAgICAgICAgICAgYnVzaWVzdERheTogIk1vbmRheSIsCiAgICAgICAgICAgIGF2ZXJhZ2VQb3N0c1BlckRheTogNDIsCiAgICAgICAgICAgIHRvdGFsQXR0YWNobWVudHM6IDg5CiAgICAgICAgKQogICAgfQp9CgovLyBNQVJLOiAtIEFubm91bmNlbWVudCBNb2RlbApzdHJ1Y3QgQW5ub3VuY2VtZW50OiBJZGVudGlmaWFibGUgewogICAgbGV0IGlkID0gVVVJRCgpCiAgICBsZXQgdGl0bGU6IFN0cmluZwogICAgbGV0IGNvbnRlbnQ6IFN0cmluZwogICAgbGV0IGNyZWF0ZWREYXRlOiBEYXRlCiAgICBsZXQgaXNJbXBvcnRhbnQ6IEJvb2wKfQoKLy8gTUFSSzogLSBEYXRlIEZvcm1hdHRlcnMKbGV0IHJlbGF0aXZlRGF0ZUZvcm1hdHRlcjogUmVsYXRpdmVEYXRlVGltZUZvcm1hdHRlciA9IHsKICAgIGxldCBmb3JtYXR0ZXIgPSBSZWxhdGl2ZURhdGVUaW1lRm9ybWF0dGVyKCkKICAgIGZvcm1hdHRlci51bml0c1N0eWxlID0gLmFiYnJldmlhdGVkCiAgICByZXR1cm4gZm9ybWF0dGVyCn0oKQo=
--- END ---

--- FILE: MacChan/Models/ForumDataSeed.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Models/CloudKitModels.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/UserSettingsStore.swift ---
BASE64: aW1wb3J0IEZvdW5kYXRpb24KaW1wb3J0IFN3aWZ0VUkKCnN0cnVjdCBVc2VyU2V0dGluZ3MgewogICAgdmFyIGFjY2VudENvbG9yOiBTdHJpbmcgPSAiYmx1ZSIKICAgIHZhciBkZWZhdWx0SG9tZVNlY3Rpb246IFN0cmluZyA9ICJGb3J1bXMiCiAgICB2YXIgc2hvd05TRlc6IEJvb2wgPSBmYWxzZQp9CgpjbGFzcyBVc2VyU2V0dGluZ3NTdG9yZTogT2JzZXJ2YWJsZU9iamVjdCB7CiAgICBzdGF0aWMgbGV0IHNoYXJlZCA9IFVzZXJTZXR0aW5nc1N0b3JlKCkKCiAgICBAUHVibGlzaGVkIHZhciBhY2NlbnRDb2xvcjogU3RyaW5nID0gImJsdWUiCiAgICBAUHVibGlzaGVkIHZhciBkZWZhdWx0SG9tZVNlY3Rpb246IFN0cmluZyA9ICJGb3J1bXMiCiAgICBAUHVibGlzaGVkIHZhciBzaG93TlNGVzogQm9vbCA9IGZhbHNlCgogICAgcHJpdmF0ZSBpbml0KCkgewogICAgICAgIGxvYWQoKQogICAgfQoKICAgIGZ1bmMgbG9hZCgpIHsKICAgICAgICAvLyBTdHViOiBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIGxvYWQgZnJvbSBDb3JlRGF0YSBoZXJlLgogICAgICAgIC8vIEV4YW1wbGU6IExvYWQgZnJvbSBVc2VyRGVmYXVsdHMgb3IganVzdCB1c2UgZGVmYXVsdHMgZm9yIG5vdy4KICAgICAgICBsZXQgc2F2ZWQgPSBVc2VyRGVmYXVsdHMuc3RhbmRhcmQKICAgICAgICBhY2NlbnRDb2xvciA9IHNhdmVkLnN0cmluZyhmb3JLZXk6ICJhY2NlbnRDb2xvciIpID8/ICJibHVlIgogICAgICAgIGRlZmF1bHRIb21lU2VjdGlvbiA9IHNhdmVkLnN0cmluZyhmb3JLZXk6ICJkZWZhdWx0SG9tZVNlY3Rpb24iKSA/PyAiRm9ydW1zIgogICAgICAgIHNob3dOU0ZXID0gc2F2ZWQuYm9vbChmb3JLZXk6ICJzaG93TlNGVyIpCiAgICB9CgogICAgZnVuYyBzYXZlKCkgewogICAgICAgIC8vIFN0dWI6IEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgc2F2ZSB0byBDb3JlRGF0YSBoZXJlLgogICAgICAgIGxldCBzYXZlZCA9IFVzZXJEZWZhdWx0cy5zdGFuZGFyZAogICAgICAgIHNhdmVkLnNldChhY2NlbnRDb2xvciwgZm9yS2V5OiAiYWNjZW50Q29sb3IiKQogICAgICAgIHNhdmVkLnNldChkZWZhdWx0SG9tZVNlY3Rpb24sIGZvcktleTogImRlZmF1bHRIb21lU2VjdGlvbiIpCiAgICAgICAgc2F2ZWQuc2V0KHNob3dOU0ZXLCBmb3JLZXk6ICJzaG93TlNGVyIpCiAgICB9Cn0K
--- END ---

--- FILE: MacChan/Views/AdminPanelView.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/SettingsView.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/MainForumView.swift ---
BASE64: aW1wb3J0IFN3aWZ0VUkKCnN0cnVjdCBNYWluRm9ydW1WaWV3OiBWaWV3IHsKICAgIEBFbnZpcm9ubWVudE9iamVjdCBwcml2YXRlIHZhciBhdXRoTWFuYWdlcjogQXV0aGVudGljYXRpb25NYW5hZ2VyCiAgICBARW52aXJvbm1lbnRPYmplY3QgcHJpdmF0ZSB2YXIgY2xvdWRLaXRNYW5hZ2VyOiBDbG91ZEtpdE1hbmFnZXIKCiAgICBAU3RhdGUgcHJpdmF0ZSB2YXIgc2VsZWN0ZWRTZWN0aW9uOiBOYXZpZ2F0aW9uU2VjdGlvbiA9IC5mb3J1bXMKCiAgICBlbnVtIE5hdmlnYXRpb25TZWN0aW9uOiBTdHJpbmcsIENhc2VJdGVyYWJsZSB7CiAgICAgICAgY2FzZSBmb3J1bXMgPSAiRm9ydW1zIgogICAgICAgIGNhc2UgcmVjZW50ID0gIlJlY2VudCBQb3N0cyIKICAgICAgICBjYXNlIG1lc3NhZ2VzID0gIk1lc3NhZ2VzIgogICAgICAgIGNhc2Ugc2VhcmNoID0gIlNlYXJjaCIKICAgICAgICBjYXNlIHByb2ZpbGUgPSAiUHJvZmlsZSIKICAgICAgICBjYXNlIHNldHRpbmdzID0gIlNldHRpbmdzIgogICAgICAgIGNhc2UgYWRtaW4gPSAiQWRtaW4iCgogICAgICAgIHZhciBpY29uOiBTdHJpbmcgewogICAgICAgICAgICBzd2l0Y2ggc2VsZiB7CiAgICAgICAgICAgIGNhc2UgLmZvcnVtczogcmV0dXJuICJsaXN0LmJ1bGxldC5yZWN0YW5nbGUiCiAgICAgICAgICAgIGNhc2UgLnJlY2VudDogcmV0dXJuICJjbG9jayIKICAgICAgICAgICAgY2FzZSAubWVzc2FnZXM6IHJldHVybiAiZW52ZWxvcGUiCiAgICAgICAgICAgIGNhc2UgLnNlYXJjaDogcmV0dXJuICJtYWduaWZ5aW5nZ2xhc3MiCiAgICAgICAgICAgIGNhc2UgLnByb2ZpbGU6IHJldHVybiAicGVyc29uLmNpcmNsZSIKICAgICAgICAgICAgY2FzZSAuc2V0dGluZ3M6IHJldHVybiAiZ2VhciIKICAgICAgICAgICAgY2FzZSAuYWRtaW46IHJldHVybiAic2hpZWxkLmxlZnRoYWxmLmZpbGwiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgdmFyIGJvZHk6IHNvbWUgVmlldyB7CiAgICAgICAgWlN0YWNrIHsKICAgICAgICAgICAgI2lmIG9zKGlPUykKICAgICAgICAgICAgLy8gaU9TOiBUYWItYmFzZWQgbmF2aWdhdGlvbgogICAgICAgICAgICBUYWJWaWV3KHNlbGVjdGlvbjogJHNlbGVjdGVkU2VjdGlvbikgewogICAgICAgICAgICAgICAgRm9ydW1Ccm93c2VyVmlldygpCiAgICAgICAgICAgICAgICAgICAgLnRhYkl0ZW0gewogICAgICAgICAgICAgICAgICAgICAgICBJbWFnZShzeXN0ZW1OYW1lOiBOYXZpZ2F0aW9uU2VjdGlvbi5mb3J1bXMuaWNvbikKICAgICAgICAgICAgICAgICAgICAgICAgVGV4dChOYXZpZ2F0aW9uU2VjdGlvbi5mb3J1bXMucmF3VmFsdWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC50YWcoTmF2aWdhdGlvblNlY3Rpb24uZm9ydW1zKQoKICAgICAgICAgICAgICAgIFRleHQoIlJlY2VudCBQb3N0cyBDb21pbmcgU29vbiIpCiAgICAgICAgICAgICAgICAgICAgLnRhYkl0ZW0gewogICAgICAgICAgICAgICAgICAgICAgICBJbWFnZShzeXN0ZW1OYW1lOiBOYXZpZ2F0aW9uU2VjdGlvbi5yZWNlbnQuaWNvbikKICAgICAgICAgICAgICAgICAgICAgICAgVGV4dChOYXZpZ2F0aW9uU2VjdGlvbi5yZWNlbnQucmF3VmFsdWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC50YWcoTmF2aWdhdGlvblNlY3Rpb24ucmVjZW50KQoKICAgICAgICAgICAgICAgIFRleHQoIk1lc3NhZ2VzIENvbWluZyBTb29uIikKICAgICAgICAgICAgICAgICAgICAudGFiSXRlbSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEltYWdlKHN5c3RlbU5hbWU6IE5hdmlnYXRpb25TZWN0aW9uLm1lc3NhZ2VzLmljb24pCiAgICAgICAgICAgICAgICAgICAgICAgIFRleHQoTmF2aWdhdGlvblNlY3Rpb24ubWVzc2FnZXMucmF3VmFsdWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC50YWcoTmF2aWdhdGlvblNlY3Rpb24ubWVzc2FnZXMpCgogICAgICAgICAgICAgICAgVGV4dCgiU2VhcmNoIENvbWluZyBTb29uIikKICAgICAgICAgICAgICAgICAgICAudGFiSXRlbSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEltYWdlKHN5c3RlbU5hbWU6IE5hdmlnYXRpb25TZWN0aW9uLnNlYXJjaC5pY29uKQogICAgICAgICAgICAgICAgICAgICAgICBUZXh0KE5hdmlnYXRpb25TZWN0aW9uLnNlYXJjaC5yYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLnRhZyhOYXZpZ2F0aW9uU2VjdGlvbi5zZWFyY2gpCgogICAgICAgICAgICAgICAgVGV4dCgiUHJvZmlsZSBDb21pbmcgU29vbiIpCiAgICAgICAgICAgICAgICAgICAgLnRhYkl0ZW0gewogICAgICAgICAgICAgICAgICAgICAgICBJbWFnZShzeXN0ZW1OYW1lOiBOYXZpZ2F0aW9uU2VjdGlvbi5wcm9maWxlLmljb24pCiAgICAgICAgICAgICAgICAgICAgICAgIFRleHQoTmF2aWdhdGlvblNlY3Rpb24ucHJvZmlsZS5yYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLnRhZyhOYXZpZ2F0aW9uU2VjdGlvbi5wcm9maWxlKQoKICAgICAgICAgICAgICAgIFRleHQoIlNldHRpbmdzIENvbWluZyBTb29uIikKICAgICAgICAgICAgICAgICAgICAudGFiSXRlbSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEltYWdlKHN5c3RlbU5hbWU6IE5hdmlnYXRpb25TZWN0aW9uLnNldHRpbmdzLmljb24pCiAgICAgICAgICAgICAgICAgICAgICAgIFRleHQoTmF2aWdhdGlvblNlY3Rpb24uc2V0dGluZ3MucmF3VmFsdWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC50YWcoTmF2aWdhdGlvblNlY3Rpb24uc2V0dGluZ3MpCgogICAgICAgICAgICAgICAgaWYgY2xvdWRLaXRNYW5hZ2VyLmN1cnJlbnRVc2VyPy5pc0FkbWluID09IHRydWUgewogICAgICAgICAgICAgICAgICAgIEFkbWluUGFuZWxWaWV3KCkKICAgICAgICAgICAgICAgICAgICAgICAgLnRhYkl0ZW0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW1hZ2Uoc3lzdGVtTmFtZTogTmF2aWdhdGlvblNlY3Rpb24uYWRtaW4uaWNvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHQoTmF2aWdhdGlvblNlY3Rpb24uYWRtaW4ucmF3VmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLnRhZyhOYXZpZ2F0aW9uU2VjdGlvbi5hZG1pbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAjZWxzZQogICAgICAgICAgICAvLyBtYWNPUzogU3BsaXQgdmlldyBuYXZpZ2F0aW9uCiAgICAgICAgICAgIGxldCBhdmFpbGFibGVTZWN0aW9ucyA9IE5hdmlnYXRpb25TZWN0aW9uLmFsbENhc2VzLmZpbHRlciB7IHNlY3Rpb24gaW4KICAgICAgICAgICAgICAgIGlmIHNlY3Rpb24gPT0gLmFkbWluIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvdWRLaXRNYW5hZ2VyLmN1cnJlbnRVc2VyPy5pc0FkbWluID09IHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIE5hdmlnYXRpb25TcGxpdFZpZXcgewogICAgICAgICAgICAgICAgTGlzdChhdmFpbGFibGVTZWN0aW9ucywgaWQ6IFwuc2VsZiwgc2VsZWN0aW9uOiAkc2VsZWN0ZWRTZWN0aW9uKSB7IHNlY3Rpb24gaW4KICAgICAgICAgICAgICAgICAgICBMYWJlbChzZWN0aW9uLnJhd1ZhbHVlLCBzeXN0ZW1JbWFnZTogc2VjdGlvbi5pY29uKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLm5hdmlnYXRpb25UaXRsZSgiTWFjQ2hhbiIpCiAgICAgICAgICAgIH0gZGV0YWlsOiB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggc2VsZWN0ZWRTZWN0aW9uIHsKICAgICAgICAgICAgICAgIGNhc2UgLmZvcnVtczoKICAgICAgICAgICAgICAgICAgICBGb3J1bUJyb3dzZXJWaWV3KCkKICAgICAgICAgICAgICAgIGNhc2UgLnJlY2VudDoKICAgICAgICAgICAgICAgICAgICBUZXh0KCJSZWNlbnQgUG9zdHMgQ29taW5nIFNvb24iKQogICAgICAgICAgICAgICAgY2FzZSAubWVzc2FnZXM6CiAgICAgICAgICAgICAgICAgICAgVGV4dCgiTWVzc2FnZXMgQ29taW5nIFNvb24iKQogICAgICAgICAgICAgICAgY2FzZSAuc2VhcmNoOgogICAgICAgICAgICAgICAgICAgIFRleHQoIlNlYXJjaCBDb21pbmcgU29vbiIpCiAgICAgICAgICAgICAgICBjYXNlIC5wcm9maWxlOgogICAgICAgICAgICAgICAgICAgIFRleHQoIlByb2ZpbGUgQ29taW5nIFNvb24iKQogICAgICAgICAgICAgICAgY2FzZSAuc2V0dGluZ3M6CiAgICAgICAgICAgICAgICAgICAgVGV4dCgiU2V0dGluZ3MgQ29taW5nIFNvb24iKQogICAgICAgICAgICAgICAgY2FzZSAuYWRtaW46CiAgICAgICAgICAgICAgICAgICAgQWRtaW5QYW5lbFZpZXcoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICNlbmRpZgogICAgICAgIH0KICAgIH0KfQoKI1ByZXZpZXcgewogICAgTWFpbkZvcnVtVmlldygpCiAgICAgICAgLmVudmlyb25tZW50T2JqZWN0KEF1dGhlbnRpY2F0aW9uTWFuYWdlci5zaGFyZWQpCiAgICAgICAgLmVudmlyb25tZW50T2JqZWN0KENsb3VkS2l0TWFuYWdlci5zaGFyZWQpCn0K
--- END ---

--- FILE: MacChan/Views/ProfileView.swift ---
BASE64: Ly8gLi4uIChyZXN0IG9mIGZpbGUgdW5jaGFuZ2VkKQppbXBvcnQgU3dpZnRVSQoKc3RydWN0IERlYnVnUGFuZWw6IFZpZXcgewogICAgQEVudmlyb25tZW50T2JqZWN0IHByaXZhdGUgdmFyIGNsb3VkS2l0TWFuYWdlcjogQ2xvdWRLaXRNYW5hZ2VyCiAgICBAU3RhdGUgcHJpdmF0ZSB2YXIgaXNTZWVkaW5nID0gZmFsc2UKICAgIEBTdGF0ZSBwcml2YXRlIHZhciBpc0NoZWNraW5nU2NoZW1hID0gZmFsc2UKICAgIEBTdGF0ZSBwcml2YXRlIHZhciBpc0NsZWFyaW5nRGF0YSA9IGZhbHNlCiAgICBAU3RhdGUgcHJpdmF0ZSB2YXIgbGFzdEFjdGlvbk1lc3NhZ2U6IFN0cmluZz8KCiAgICBARW52aXJvbm1lbnQoXC5kaXNtaXNzKSBwcml2YXRlIHZhciBkaXNtaXNzCgogICAgdmFyIGJvZHk6IHNvbWUgVmlldyB7CiAgICAgICAgVlN0YWNrIHsKICAgICAgICAgICAgU2Nyb2xsVmlldyB7CiAgICAgICAgICAgICAgICBMaXN0IHsKICAgICAgICAgICAgICAgICAgICBTZWN0aW9uKGhlYWRlcjogVGV4dCgiRGVidWcgQWN0aW9ucyIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbigiU2VlZCBGb3J1bXMiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYXNrIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlZWRpbmcgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xvdWRLaXRNYW5hZ2VyLmRlYnVnU2VlZEZvcnVtcygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWVkaW5nID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0QWN0aW9uTWVzc2FnZSA9ICJTZWVkZWQgZm9ydW1zIHN1Y2Nlc3NmdWxseS4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLmRpc2FibGVkKGlzU2VlZGluZykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNTZWVkaW5nIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2dyZXNzVmlldygpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbigiQ2hlY2sgRm9ydW1zIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFzayB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xvdWRLaXRNYW5hZ2VyLmRlYnVnQ2hlY2tGb3J1bXMoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBY3Rpb25NZXNzYWdlID0gIkNoZWNrZWQgZm9ydW1zLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uKCJDaGVjayBDbG91ZEtpdCBTY2hlbWEiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYXNrIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NoZWNraW5nU2NoZW1hID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGNsb3VkS2l0TWFuYWdlci5kZWJ1Z0NoZWNrQ2xvdWRLaXRTY2hlbWEoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ2hlY2tpbmdTY2hlbWEgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBY3Rpb25NZXNzYWdlID0gIkNoZWNrZWQgQ2xvdWRLaXQgc2NoZW1hLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAuZGlzYWJsZWQoaXNDaGVja2luZ1NjaGVtYSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNDaGVja2luZ1NjaGVtYSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9ncmVzc1ZpZXcoKQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBCdXR0b24oIlByaW50IENsb3VkS2l0IENvbnNvbGUgRGF0YSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3VkS2l0TWFuYWdlci5kZWJ1Z1ByaW50Q2xvdWRLaXRDb25zb2xlRGF0YSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0QWN0aW9uTWVzc2FnZSA9ICJQcmludGVkIENsb3VkS2l0IGNvbnNvbGUgZGF0YS4iCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbigiQ2xlYXIgVXNlciBEYXRhIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFzayB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDbGVhcmluZ0RhdGEgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xvdWRLaXRNYW5hZ2VyLmRlYnVnQ2xlYXJVc2VyRGF0YSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDbGVhcmluZ0RhdGEgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBY3Rpb25NZXNzYWdlID0gIkNsZWFyZWQgdXNlciBkYXRhLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5yZWQpCiAgICAgICAgICAgICAgICAgICAgICAgIC5kaXNhYmxlZChpc0NsZWFyaW5nRGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNDbGVhcmluZ0RhdGEgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZ3Jlc3NWaWV3KCkKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uKCJGb3JjZSBEZWxldGUgUmVjb3JkcyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhc2sgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGNsb3VkS2l0TWFuYWdlci5kZWJ1Z0ZvcmNlRGVsZXRlUmVjb3JkcygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFjdGlvbk1lc3NhZ2UgPSAiRm9yY2UgZGVsZXRlZCByZWNvcmRzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5yZWQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiBsZXQgbWVzc2FnZSA9IGxhc3RBY3Rpb25NZXNzYWdlIHsKICAgICAgICAgICAgICAgICAgICAgICAgU2VjdGlvbihoZWFkZXI6IFRleHQoIkxhc3QgQWN0aW9uIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHQobWVzc2FnZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5zZWNvbmRhcnkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAubGlzdFN0eWxlKC5pbnNldCkgLy8gPC0tIEZJWEVEOiBpbnNldCB3b3JrcyBvbiBtYWNPUzsgaW5zZXRHcm91cGVkIGRvZXMgbm90CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEhTdGFjayB7CiAgICAgICAgICAgICAgICBTcGFjZXIoKQogICAgICAgICAgICAgICAgQnV0dG9uKCJDbG9zZSIpIHsKICAgICAgICAgICAgICAgICAgICBkaXNtaXNzKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC5rZXlib2FyZFNob3J0Y3V0KC5jYW5jZWxBY3Rpb24pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLnBhZGRpbmcoLmhvcml6b250YWwpCiAgICAgICAgICAgIC5wYWRkaW5nKC50b3AsIDgpCiAgICAgICAgfQogICAgICAgIC5mcmFtZShtaW5XaWR0aDogNDQwLCBtYXhXaWR0aDogNzAwLCBtaW5IZWlnaHQ6IDM0MCkKICAgIH0KfQo=
--- END ---

--- FILE: MacChan/Views/PostsListView.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/ForumBrowserView.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/ThreadsListView.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/ModerationViews.swift ---
BASE64: aW1wb3J0IFN3aWZ0VUkKCnN0cnVjdCBNb2RlcmF0aW9uUGFuZWxWaWV3OiBWaWV3IHsKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIE5hdmlnYXRpb25WaWV3IHsKICAgICAgICAgICAgRm9ybSB7CiAgICAgICAgICAgICAgICBTZWN0aW9uKCJVc2VyIE1hbmFnZW1lbnQiKSB7CiAgICAgICAgICAgICAgICAgICAgVGV4dCgiQmFuIFVzZXJzIikKICAgICAgICAgICAgICAgICAgICBUZXh0KCJVbmJhbiBVc2VycyIpCiAgICAgICAgICAgICAgICAgICAgVGV4dCgiVXNlciBSZXBvcnRzIikKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBTZWN0aW9uKCJDb250ZW50IE1vZGVyYXRpb24iKSB7CiAgICAgICAgICAgICAgICAgICAgVGV4dCgiUmVwb3J0ZWQgUG9zdHMiKQogICAgICAgICAgICAgICAgICAgIFRleHQoIlJlcG9ydGVkIFRocmVhZHMiKQogICAgICAgICAgICAgICAgICAgIFRleHQoIk1vZGVyYXRpb24gUXVldWUiKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIFNlY3Rpb24oIkZvcnVtIE1hbmFnZW1lbnQiKSB7CiAgICAgICAgICAgICAgICAgICAgVGV4dCgiQ3JlYXRlIENhdGVnb3JpZXMiKQogICAgICAgICAgICAgICAgICAgIFRleHQoIkVkaXQgQ2F0ZWdvcmllcyIpCiAgICAgICAgICAgICAgICAgICAgVGV4dCgiRm9ydW0gU3RhdGlzdGljcyIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLm5hdmlnYXRpb25UaXRsZSgiTW9kZXJhdGlvbiBQYW5lbCIpCiAgICAgICAgfQogICAgfQp9Cg==
--- END ---

--- FILE: MacChan/Views/ThreadBrowserView.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/ForumExtensionsView.swift ---
BASE64: Ly8KLy8gIEZvcnVtRXh0ZW5zaW9uc1ZpZXcuc3dpZnQKLy8gIE1hY0NoYW4KLy8KLy8gIENyZWF0ZWQgYnkgSmFyZWQgTWF4d2VsbCBvbiA5LzMvMjUuCi8vCgppbXBvcnQgU3dpZnRVSQoKc3RydWN0IEZvcnVtRXh0ZW5zaW9uc1ZpZXc6IFZpZXcgewogICAgQEVudmlyb25tZW50T2JqZWN0IHByaXZhdGUgdmFyIGNsb3VkS2l0TWFuYWdlcjogQ2xvdWRLaXRNYW5hZ2VyCiAgICBAU3RhdGUgcHJpdmF0ZSB2YXIgc2VsZWN0ZWRFeHRlbnNpb24gPSAwCgogICAgdmFyIGJvZHk6IHNvbWUgVmlldyB7CiAgICAgICAgTmF2aWdhdGlvblZpZXcgewogICAgICAgICAgICBWU3RhY2sgewogICAgICAgICAgICAgICAgUGlja2VyKCJFeHRlbnNpb25zIiwgc2VsZWN0aW9uOiAkc2VsZWN0ZWRFeHRlbnNpb24pIHsKICAgICAgICAgICAgICAgICAgICBUZXh0KCJXaG8ncyBPbmxpbmUiKS50YWcoMCkKICAgICAgICAgICAgICAgICAgICBUZXh0KCJTdGF0aXN0aWNzIikudGFnKDEpCiAgICAgICAgICAgICAgICAgICAgVGV4dCgiQW5ub3VuY2VtZW50cyIpLnRhZygyKQogICAgICAgICAgICAgICAgICAgIFRleHQoIlJ1bGVzIikudGFnKDMpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAucGlja2VyU3R5bGUoU2VnbWVudGVkUGlja2VyU3R5bGUoKSkKICAgICAgICAgICAgICAgIC5wYWRkaW5nKCkKCiAgICAgICAgICAgICAgICBUYWJWaWV3KHNlbGVjdGlvbjogJHNlbGVjdGVkRXh0ZW5zaW9uKSB7CiAgICAgICAgICAgICAgICAgICAgV2hvc09ubGluZVZpZXcoKQogICAgICAgICAgICAgICAgICAgICAgICAudGFnKDApCgogICAgICAgICAgICAgICAgICAgIFN0YXRpc3RpY3NWaWV3KCkKICAgICAgICAgICAgICAgICAgICAgICAgLnRhZygxKQoKICAgICAgICAgICAgICAgICAgICBBbm5vdW5jZW1lbnRzVmlldygpCiAgICAgICAgICAgICAgICAgICAgICAgIC50YWcoMikKCiAgICAgICAgICAgICAgICAgICAgRm9ydW1SdWxlc1ZpZXcoKQogICAgICAgICAgICAgICAgICAgICAgICAudGFnKDMpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAjaWYgb3MoaU9TKQogICAgICAgICAgICAgICAgLnRhYlZpZXdTdHlsZShQYWdlVGFiVmlld1N0eWxlKGluZGV4RGlzcGxheU1vZGU6IC5uZXZlcikpCiAgICAgICAgICAgICAgICAjZW5kaWYKICAgICAgICAgICAgfQogICAgICAgICAgICAubmF2aWdhdGlvblRpdGxlKCJGb3J1bSBFeHRlbnNpb25zIikKICAgICAgICB9CiAgICB9Cn0KCnN0cnVjdCBXaG9zT25saW5lVmlldzogVmlldyB7CiAgICBARW52aXJvbm1lbnRPYmplY3QgcHJpdmF0ZSB2YXIgY2xvdWRLaXRNYW5hZ2VyOiBDbG91ZEtpdE1hbmFnZXIKICAgIEBTdGF0ZSBwcml2YXRlIHZhciBvbmxpbmVVc2VyczogW0ZvcnVtVXNlcl0gPSBbXQogICAgQFN0YXRlIHByaXZhdGUgdmFyIGlzTG9hZGluZyA9IGZhbHNlCgogICAgdmFyIGJvZHk6IHNvbWUgVmlldyB7CiAgICAgICAgR3JvdXAgewogICAgICAgICAgICBpZiBpc0xvYWRpbmcgewogICAgICAgICAgICAgICAgUHJvZ3Jlc3NWaWV3KCJMb2FkaW5nIG9ubGluZSB1c2Vycy4uLiIpCiAgICAgICAgICAgICAgICAgICAgLmZyYW1lKG1heFdpZHRoOiAuaW5maW5pdHksIG1heEhlaWdodDogLmluZmluaXR5KQogICAgICAgICAgICB9IGVsc2UgaWYgb25saW5lVXNlcnMuaXNFbXB0eSB7CiAgICAgICAgICAgICAgICBWU3RhY2soc3BhY2luZzogMTYpIHsKICAgICAgICAgICAgICAgICAgICBJbWFnZShzeXN0ZW1OYW1lOiAicGVyc29uLjIiKQogICAgICAgICAgICAgICAgICAgICAgICAuZm9udCguc3lzdGVtKHNpemU6IDUwKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgICAgICAgICAgICAgIFRleHQoIk5vIHVzZXJzIG9ubGluZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb250KC5oZWFkbGluZSkKICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgICAgICAgICAgICAgIFRleHQoIk9ubGluZSB1c2VycyB3aWxsIGFwcGVhciBoZXJlIikKICAgICAgICAgICAgICAgICAgICAgICAgLmZvbnQoLmNhcHRpb24pCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JlZ3JvdW5kQ29sb3IoLnNlY29uZGFyeSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC5wYWRkaW5nKCkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIExpc3QgewogICAgICAgICAgICAgICAgICAgIEZvckVhY2gob25saW5lVXNlcnMpIHsgdXNlciBpbgogICAgICAgICAgICAgICAgICAgICAgICBPbmxpbmVVc2VyUm93Vmlldyh1c2VyOiB1c2VyKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAudGFzayB7CiAgICAgICAgICAgIGF3YWl0IGxvYWRPbmxpbmVVc2VycygpCiAgICAgICAgfQogICAgICAgIC5yZWZyZXNoYWJsZSB7CiAgICAgICAgICAgIGF3YWl0IGxvYWRPbmxpbmVVc2VycygpCiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBsb2FkT25saW5lVXNlcnMoKSBhc3luYyB7CiAgICAgICAgaXNMb2FkaW5nID0gdHJ1ZQogICAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgeW91J2QgcXVlcnkgZm9yIHVzZXJzIGFjdGl2ZSBpbiB0aGUgbGFzdCA1IG1pbnV0ZXMKICAgICAgICAvLyBGb3Igbm93LCB3ZSdsbCBjcmVhdGUgbW9jayBkYXRhCiAgICAgICAgb25saW5lVXNlcnMgPSBbXQogICAgICAgIGlzTG9hZGluZyA9IGZhbHNlCiAgICB9Cn0KCnN0cnVjdCBPbmxpbmVVc2VyUm93VmlldzogVmlldyB7CiAgICBsZXQgdXNlcjogRm9ydW1Vc2VyCgogICAgdmFyIGJvZHk6IHNvbWUgVmlldyB7CiAgICAgICAgSFN0YWNrIHsKICAgICAgICAgICAgLy8gQXZhdGFyIHBsYWNlaG9sZGVyCiAgICAgICAgICAgIENpcmNsZSgpCiAgICAgICAgICAgICAgICAuZmlsbChDb2xvci5ibHVlLm9wYWNpdHkoMC4zKSkKICAgICAgICAgICAgICAgIC5mcmFtZSh3aWR0aDogNDAsIGhlaWdodDogNDApCiAgICAgICAgICAgICAgICAub3ZlcmxheSgKICAgICAgICAgICAgICAgICAgICBUZXh0KFN0cmluZyh1c2VyLmRpc3BsYXlOYW1lLnByZWZpeCgxKSkudXBwZXJjYXNlZCgpKQogICAgICAgICAgICAgICAgICAgICAgICAuZm9udCguaGVhZGxpbmUpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JlZ3JvdW5kQ29sb3IoLmJsdWUpCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBWU3RhY2soYWxpZ25tZW50OiAubGVhZGluZywgc3BhY2luZzogNCkgewogICAgICAgICAgICAgICAgVGV4dCh1c2VyLmRpc3BsYXlOYW1lKQogICAgICAgICAgICAgICAgICAgIC5mb250KC5oZWFkbGluZSkKICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5wcmltYXJ5KQoKICAgICAgICAgICAgICAgIFRleHQoIkBcKHVzZXIudXNlcm5hbWUpIikKICAgICAgICAgICAgICAgICAgICAuZm9udCguY2FwdGlvbikKICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5zZWNvbmRhcnkpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFNwYWNlcigpCgogICAgICAgICAgICBWU3RhY2soYWxpZ25tZW50OiAudHJhaWxpbmcsIHNwYWNpbmc6IDQpIHsKICAgICAgICAgICAgICAgIFRleHQoIk9ubGluZSIpCiAgICAgICAgICAgICAgICAgICAgLmZvbnQoLmNhcHRpb24pCiAgICAgICAgICAgICAgICAgICAgLmZvbnRXZWlnaHQoLnNlbWlib2xkKQogICAgICAgICAgICAgICAgICAgIC5mb3JlZ3JvdW5kQ29sb3IoLmdyZWVuKQoKICAgICAgICAgICAgICAgIFRleHQoIlwodXNlci5wb3N0Q291bnQpIHBvc3RzIikKICAgICAgICAgICAgICAgICAgICAuZm9udCguY2FwdGlvbjIpCiAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC5wYWRkaW5nKC52ZXJ0aWNhbCwgNCkKICAgIH0KfQoKc3RydWN0IFN0YXRpc3RpY3NWaWV3OiBWaWV3IHsKICAgIEBTdGF0ZSBwcml2YXRlIHZhciBzdGF0aXN0aWNzOiBGb3J1bVN0YXRpc3RpY3M/CiAgICBAU3RhdGUgcHJpdmF0ZSB2YXIgaXNMb2FkaW5nID0gZmFsc2UKCiAgICB2YXIgYm9keTogc29tZSBWaWV3IHsKICAgICAgICBHcm91cCB7CiAgICAgICAgICAgIGlmIGlzTG9hZGluZyB7CiAgICAgICAgICAgICAgICBQcm9ncmVzc1ZpZXcoIkxvYWRpbmcgc3RhdGlzdGljcy4uLiIpCiAgICAgICAgICAgICAgICAgICAgLmZyYW1lKG1heFdpZHRoOiAuaW5maW5pdHksIG1heEhlaWdodDogLmluZmluaXR5KQogICAgICAgICAgICB9IGVsc2UgaWYgbGV0IHN0YXRzID0gc3RhdGlzdGljcyB7CiAgICAgICAgICAgICAgICBTY3JvbGxWaWV3IHsKICAgICAgICAgICAgICAgICAgICBWU3RhY2soc3BhY2luZzogMjApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3ZlcnZpZXcgc3RhdHMKICAgICAgICAgICAgICAgICAgICAgICAgT3ZlcnZpZXdTdGF0c0NhcmQoc3RhdHM6IHN0YXRzKQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWN0aXZpdHkgc3RhdHMKICAgICAgICAgICAgICAgICAgICAgICAgQWN0aXZpdHlTdGF0c0NhcmQoc3RhdHM6IHN0YXRzKQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29udGVudCBzdGF0cwogICAgICAgICAgICAgICAgICAgICAgICBDb250ZW50U3RhdHNDYXJkKHN0YXRzOiBzdGF0cykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLnBhZGRpbmcoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgVlN0YWNrKHNwYWNpbmc6IDE2KSB7CiAgICAgICAgICAgICAgICAgICAgSW1hZ2Uoc3lzdGVtTmFtZTogImNoYXJ0LmJhci5maWxsIikKICAgICAgICAgICAgICAgICAgICAgICAgLmZvbnQoLnN5c3RlbShzaXplOiA1MCkpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JlZ3JvdW5kQ29sb3IoLnNlY29uZGFyeSkKICAgICAgICAgICAgICAgICAgICBUZXh0KCJObyBzdGF0aXN0aWNzIGF2YWlsYWJsZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb250KC5oZWFkbGluZSkKICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgICAgICAgICAgICAgIFRleHQoIlN0YXRpc3RpY3Mgd2lsbCBhcHBlYXIgaGVyZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb250KC5jYXB0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5zZWNvbmRhcnkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAucGFkZGluZygpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLnRhc2sgewogICAgICAgICAgICBhd2FpdCBsb2FkU3RhdGlzdGljcygpCiAgICAgICAgfQogICAgfQoKICAgIHByaXZhdGUgZnVuYyBsb2FkU3RhdGlzdGljcygpIGFzeW5jIHsKICAgICAgICBpc0xvYWRpbmcgPSB0cnVlCiAgICAgICAgLy8gTW9jayBzdGF0aXN0aWNzIGRhdGEKICAgICAgICBzdGF0aXN0aWNzID0gRm9ydW1TdGF0aXN0aWNzLm1vY2tEYXRhKCkKICAgICAgICBpc0xvYWRpbmcgPSBmYWxzZQogICAgfQp9CgpzdHJ1Y3QgT3ZlcnZpZXdTdGF0c0NhcmQ6IFZpZXcgewogICAgbGV0IHN0YXRzOiBGb3J1bVN0YXRpc3RpY3MKCiAgICB2YXIgYm9keTogc29tZSBWaWV3IHsKICAgICAgICBWU3RhY2soYWxpZ25tZW50OiAubGVhZGluZywgc3BhY2luZzogMTIpIHsKICAgICAgICAgICAgVGV4dCgiT3ZlcnZpZXciKQogICAgICAgICAgICAgICAgLmZvbnQoLmhlYWRsaW5lKQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvcigucHJpbWFyeSkKCiAgICAgICAgICAgIExhenlWR3JpZChjb2x1bW5zOiBbCiAgICAgICAgICAgICAgICBHcmlkSXRlbSguZmxleGlibGUoKSksCiAgICAgICAgICAgICAgICBHcmlkSXRlbSguZmxleGlibGUoKSkKICAgICAgICAgICAgXSwgc3BhY2luZzogMTYpIHsKICAgICAgICAgICAgICAgIFN0YXRJdGVtKHRpdGxlOiAiVG90YWwgUG9zdHMiLCB2YWx1ZTogIlwoc3RhdHMudG90YWxQb3N0cykiKQogICAgICAgICAgICAgICAgU3RhdEl0ZW0odGl0bGU6ICJUb3RhbCBUaHJlYWRzIiwgdmFsdWU6ICJcKHN0YXRzLnRvdGFsVGhyZWFkcykiKQogICAgICAgICAgICAgICAgU3RhdEl0ZW0odGl0bGU6ICJSZWdpc3RlcmVkIFVzZXJzIiwgdmFsdWU6ICJcKHN0YXRzLnJlZ2lzdGVyZWRVc2VycykiKQogICAgICAgICAgICAgICAgU3RhdEl0ZW0odGl0bGU6ICJGb3J1bXMiLCB2YWx1ZTogIlwoc3RhdHMudG90YWxGb3J1bXMpIikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAucGFkZGluZygpCiAgICAgICAgLmJhY2tncm91bmQoQ29sb3IuZ3JheS5vcGFjaXR5KDAuMTUpKQogICAgICAgIC5jb3JuZXJSYWRpdXMoMTIpCiAgICB9Cn0KCnN0cnVjdCBBY3Rpdml0eVN0YXRzQ2FyZDogVmlldyB7CiAgICBsZXQgc3RhdHM6IEZvcnVtU3RhdGlzdGljcwoKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIFZTdGFjayhhbGlnbm1lbnQ6IC5sZWFkaW5nLCBzcGFjaW5nOiAxMikgewogICAgICAgICAgICBUZXh0KCJBY3Rpdml0eSIpCiAgICAgICAgICAgICAgICAuZm9udCguaGVhZGxpbmUpCiAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5wcmltYXJ5KQoKICAgICAgICAgICAgVlN0YWNrKHNwYWNpbmc6IDgpIHsKICAgICAgICAgICAgICAgIFN0YXRSb3codGl0bGU6ICJQb3N0cyBUb2RheSIsIHZhbHVlOiAiXChzdGF0cy5wb3N0c1RvZGF5KSIpCiAgICAgICAgICAgICAgICBTdGF0Um93KHRpdGxlOiAiUG9zdHMgVGhpcyBXZWVrIiwgdmFsdWU6ICJcKHN0YXRzLnBvc3RzVGhpc1dlZWspIikKICAgICAgICAgICAgICAgIFN0YXRSb3codGl0bGU6ICJQb3N0cyBUaGlzIE1vbnRoIiwgdmFsdWU6ICJcKHN0YXRzLnBvc3RzVGhpc01vbnRoKSIpCiAgICAgICAgICAgICAgICBTdGF0Um93KHRpdGxlOiAiTmV3IFVzZXJzIFRvZGF5IiwgdmFsdWU6ICJcKHN0YXRzLm5ld1VzZXJzVG9kYXkpIikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAucGFkZGluZygpCiAgICAgICAgLmJhY2tncm91bmQoQ29sb3IuZ3JheS5vcGFjaXR5KDAuMTUpKQogICAgICAgIC5jb3JuZXJSYWRpdXMoMTIpCiAgICB9Cn0KCnN0cnVjdCBDb250ZW50U3RhdHNDYXJkOiBWaWV3IHsKICAgIGxldCBzdGF0czogRm9ydW1TdGF0aXN0aWNzCgogICAgdmFyIGJvZHk6IHNvbWUgVmlldyB7CiAgICAgICAgVlN0YWNrKGFsaWdubWVudDogLmxlYWRpbmcsIHNwYWNpbmc6IDEyKSB7CiAgICAgICAgICAgIFRleHQoIkNvbnRlbnQiKQogICAgICAgICAgICAgICAgLmZvbnQoLmhlYWRsaW5lKQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvcigucHJpbWFyeSkKCiAgICAgICAgICAgIFZTdGFjayhzcGFjaW5nOiA4KSB7CiAgICAgICAgICAgICAgICBTdGF0Um93KHRpdGxlOiAiTW9zdCBBY3RpdmUgRm9ydW0iLCB2YWx1ZTogc3RhdHMubW9zdEFjdGl2ZUZvcnVtKQogICAgICAgICAgICAgICAgU3RhdFJvdyh0aXRsZTogIkJ1c2llc3QgRGF5IiwgdmFsdWU6IHN0YXRzLmJ1c2llc3REYXkpCiAgICAgICAgICAgICAgICBTdGF0Um93KHRpdGxlOiAiQXZlcmFnZSBQb3N0cy9EYXkiLCB2YWx1ZTogIlwoc3RhdHMuYXZlcmFnZVBvc3RzUGVyRGF5KSIpCiAgICAgICAgICAgICAgICBTdGF0Um93KHRpdGxlOiAiVG90YWwgQXR0YWNobWVudHMiLCB2YWx1ZTogIlwoc3RhdHMudG90YWxBdHRhY2htZW50cykiKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC5wYWRkaW5nKCkKICAgICAgICAuYmFja2dyb3VuZChDb2xvci5ncmF5Lm9wYWNpdHkoMC4xNSkpCiAgICAgICAgLmNvcm5lclJhZGl1cygxMikKICAgIH0KfQoKc3RydWN0IFN0YXRJdGVtOiBWaWV3IHsKICAgIGxldCB0aXRsZTogU3RyaW5nCiAgICBsZXQgdmFsdWU6IFN0cmluZwoKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIFZTdGFjayhzcGFjaW5nOiA0KSB7CiAgICAgICAgICAgIFRleHQodmFsdWUpCiAgICAgICAgICAgICAgICAuZm9udCgudGl0bGUyKQogICAgICAgICAgICAgICAgLmZvbnRXZWlnaHQoLmJvbGQpCiAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5wcmltYXJ5KQoKICAgICAgICAgICAgVGV4dCh0aXRsZSkKICAgICAgICAgICAgICAgIC5mb250KC5jYXB0aW9uKQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgIH0KICAgICAgICAuZnJhbWUobWF4V2lkdGg6IC5pbmZpbml0eSkKICAgICAgICAucGFkZGluZygpCiAgICAgICAgLmJhY2tncm91bmQoQ29sb3IuYmx1ZS5vcGFjaXR5KDAuMSkpCiAgICAgICAgLmNvcm5lclJhZGl1cyg4KQogICAgfQp9CgpzdHJ1Y3QgU3RhdFJvdzogVmlldyB7CiAgICBsZXQgdGl0bGU6IFN0cmluZwogICAgbGV0IHZhbHVlOiBTdHJpbmcKCiAgICB2YXIgYm9keTogc29tZSBWaWV3IHsKICAgICAgICBIU3RhY2sgewogICAgICAgICAgICBUZXh0KHRpdGxlKQogICAgICAgICAgICAgICAgLmZvbnQoLnN1YmhlYWRsaW5lKQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvcigucHJpbWFyeSkKCiAgICAgICAgICAgIFNwYWNlcigpCgogICAgICAgICAgICBUZXh0KHZhbHVlKQogICAgICAgICAgICAgICAgLmZvbnQoLnN1YmhlYWRsaW5lKQogICAgICAgICAgICAgICAgLmZvbnRXZWlnaHQoLnNlbWlib2xkKQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgIH0KICAgIH0KfQoKc3RydWN0IEFubm91bmNlbWVudHNWaWV3OiBWaWV3IHsKICAgIEBFbnZpcm9ubWVudE9iamVjdCBwcml2YXRlIHZhciBjbG91ZEtpdE1hbmFnZXI6IENsb3VkS2l0TWFuYWdlcgogICAgQFN0YXRlIHByaXZhdGUgdmFyIGFubm91bmNlbWVudHM6IFtBbm5vdW5jZW1lbnRdID0gW10KICAgIEBTdGF0ZSBwcml2YXRlIHZhciBpc0xvYWRpbmcgPSBmYWxzZQoKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIEdyb3VwIHsKICAgICAgICAgICAgaWYgaXNMb2FkaW5nIHsKICAgICAgICAgICAgICAgIFByb2dyZXNzVmlldygiTG9hZGluZyBhbm5vdW5jZW1lbnRzLi4uIikKICAgICAgICAgICAgICAgICAgICAuZnJhbWUobWF4V2lkdGg6IC5pbmZpbml0eSwgbWF4SGVpZ2h0OiAuaW5maW5pdHkpCiAgICAgICAgICAgIH0gZWxzZSBpZiBhbm5vdW5jZW1lbnRzLmlzRW1wdHkgewogICAgICAgICAgICAgICAgVlN0YWNrKHNwYWNpbmc6IDE2KSB7CiAgICAgICAgICAgICAgICAgICAgSW1hZ2Uoc3lzdGVtTmFtZTogIm1lZ2FwaG9uZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb250KC5zeXN0ZW0oc2l6ZTogNTApKQogICAgICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5zZWNvbmRhcnkpCiAgICAgICAgICAgICAgICAgICAgVGV4dCgiTm8gYW5ub3VuY2VtZW50cyIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb250KC5oZWFkbGluZSkKICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgICAgICAgICAgICAgIFRleHQoIkltcG9ydGFudCBhbm5vdW5jZW1lbnRzIHdpbGwgYXBwZWFyIGhlcmUiKQogICAgICAgICAgICAgICAgICAgICAgICAuZm9udCguY2FwdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLnBhZGRpbmcoKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgTGlzdCB7CiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaChhbm5vdW5jZW1lbnRzKSB7IGFubm91bmNlbWVudCBpbgogICAgICAgICAgICAgICAgICAgICAgICBBbm5vdW5jZW1lbnRSb3dWaWV3KGFubm91bmNlbWVudDogYW5ub3VuY2VtZW50KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAudGFzayB7CiAgICAgICAgICAgIGF3YWl0IGxvYWRBbm5vdW5jZW1lbnRzKCkKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jIGxvYWRBbm5vdW5jZW1lbnRzKCkgYXN5bmMgewogICAgICAgIGlzTG9hZGluZyA9IHRydWUKICAgICAgICAvLyBNb2NrIGFubm91bmNlbWVudHMKICAgICAgICBhbm5vdW5jZW1lbnRzID0gWwogICAgICAgICAgICBBbm5vdW5jZW1lbnQoCiAgICAgICAgICAgICAgICB0aXRsZTogIldlbGNvbWUgdG8gTWFjQ2hhbiEiLAogICAgICAgICAgICAgICAgY29udGVudDogIldlbGNvbWUgdG8gb3VyIG5ldyBmb3J1bSEgV2UncmUgZXhjaXRlZCB0byBoYXZlIHlvdSBoZXJlLiBQbGVhc2UgdGFrZSBhIG1vbWVudCB0byByZWFkIHRoZSBmb3J1bSBydWxlcyBhbmQgaW50cm9kdWNlIHlvdXJzZWxmLiIsCiAgICAgICAgICAgICAgICBjcmVhdGVkRGF0ZTogRGF0ZSgpLmFkZGluZ1RpbWVJbnRlcnZhbCgtODY0MDApLAogICAgICAgICAgICAgICAgaXNJbXBvcnRhbnQ6IHRydWUKICAgICAgICAgICAgKSwKICAgICAgICAgICAgQW5ub3VuY2VtZW50KAogICAgICAgICAgICAgICAgdGl0bGU6ICJGb3J1bSBHdWlkZWxpbmVzIiwKICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJQbGVhc2UgcmVtZW1iZXIgdG8gYmUgcmVzcGVjdGZ1bCBhbmQgZm9sbG93IG91ciBjb21tdW5pdHkgZ3VpZGVsaW5lcy4gV2Ugd2FudCB0byBtYWludGFpbiBhIHBvc2l0aXZlIGVudmlyb25tZW50IGZvciBldmVyeW9uZS4iLAogICAgICAgICAgICAgICAgY3JlYXRlZERhdGU6IERhdGUoKS5hZGRpbmdUaW1lSW50ZXJ2YWwoLTE3MjgwMCksCiAgICAgICAgICAgICAgICBpc0ltcG9ydGFudDogZmFsc2UKICAgICAgICAgICAgKQogICAgICAgIF0KICAgICAgICBpc0xvYWRpbmcgPSBmYWxzZQogICAgfQp9CgpzdHJ1Y3QgQW5ub3VuY2VtZW50Um93VmlldzogVmlldyB7CiAgICBsZXQgYW5ub3VuY2VtZW50OiBBbm5vdW5jZW1lbnQKCiAgICB2YXIgYm9keTogc29tZSBWaWV3IHsKICAgICAgICBWU3RhY2soYWxpZ25tZW50OiAubGVhZGluZywgc3BhY2luZzogOCkgewogICAgICAgICAgICBIU3RhY2sgewogICAgICAgICAgICAgICAgVGV4dChhbm5vdW5jZW1lbnQudGl0bGUpCiAgICAgICAgICAgICAgICAgICAgLmZvbnQoLmhlYWRsaW5lKQogICAgICAgICAgICAgICAgICAgIC5mb3JlZ3JvdW5kQ29sb3IoLnByaW1hcnkpCgogICAgICAgICAgICAgICAgU3BhY2VyKCkKCiAgICAgICAgICAgICAgICBpZiBhbm5vdW5jZW1lbnQuaXNJbXBvcnRhbnQgewogICAgICAgICAgICAgICAgICAgIEltYWdlKHN5c3RlbU5hbWU6ICJleGNsYW1hdGlvbm1hcmsudHJpYW5nbGUuZmlsbCIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JlZ3JvdW5kQ29sb3IoLm9yYW5nZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgVGV4dChhbm5vdW5jZW1lbnQuY29udGVudCkKICAgICAgICAgICAgICAgIC5mb250KC5ib2R5KQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgICAgICAgICAgLmxpbmVMaW1pdCgzKQoKICAgICAgICAgICAgVGV4dChhbm5vdW5jZW1lbnQuY3JlYXRlZERhdGUsIGZvcm1hdHRlcjogcmVsYXRpdmVEYXRlRm9ybWF0dGVyKQogICAgICAgICAgICAgICAgLmZvbnQoLmNhcHRpb24pCiAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5zZWNvbmRhcnkpCiAgICAgICAgfQogICAgICAgIC5wYWRkaW5nKC52ZXJ0aWNhbCwgNCkKICAgIH0KfQoKc3RydWN0IEZvcnVtUnVsZXNWaWV3OiBWaWV3IHsKICAgIHZhciBib2R5OiBzb21lIFZpZXcgewogICAgICAgIFNjcm9sbFZpZXcgewogICAgICAgICAgICBWU3RhY2soYWxpZ25tZW50OiAubGVhZGluZywgc3BhY2luZzogMjApIHsKICAgICAgICAgICAgICAgIFRleHQoIkZvcnVtIFJ1bGVzIikKICAgICAgICAgICAgICAgICAgICAuZm9udCgubGFyZ2VUaXRsZSkKICAgICAgICAgICAgICAgICAgICAuZm9udFdlaWdodCguYm9sZCkKCiAgICAgICAgICAgICAgICBUZXh0KCJMYXN0IHVwZGF0ZWQ6IEphbnVhcnkgMSwgMjAyNSIpCiAgICAgICAgICAgICAgICAgICAgLmZvbnQoLmNhcHRpb24pCiAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQoKICAgICAgICAgICAgICAgIEdyb3VwIHsKICAgICAgICAgICAgICAgICAgICBSdWxlU2VjdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICIxLiBSZXNwZWN0IGFuZCBDb3VydGVzeSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJUcmVhdCBhbGwgbWVtYmVycyB3aXRoIHJlc3BlY3QgYW5kIGNvdXJ0ZXN5LiBQZXJzb25hbCBhdHRhY2tzLCBoYXJhc3NtZW50LCBvciBpbmZsYW1tYXRvcnkgYmVoYXZpb3Igd2lsbCBub3QgYmUgdG9sZXJhdGVkLiIKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgIFJ1bGVTZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIjIuIEFwcHJvcHJpYXRlIENvbnRlbnQiLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiS2VlcCBhbGwgY29udGVudCBhcHByb3ByaWF0ZSBmb3IgYSBnZW5lcmFsIGF1ZGllbmNlLiBObyBleHBsaWNpdCwgb2ZmZW5zaXZlLCBvciBpbGxlZ2FsIGNvbnRlbnQgaXMgYWxsb3dlZC4iCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBSdWxlU2VjdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICIzLiBObyBTcGFtIiwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogIkRvIG5vdCBwb3N0IHNwYW0sIGFkdmVydGlzZW1lbnRzLCBvciBvZmYtdG9waWMgY29udGVudC4gS2VlcCBkaXNjdXNzaW9ucyByZWxldmFudCB0byB0aGUgZm9ydW0gdG9waWMuIgogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAgICAgUnVsZVNlY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiNC4gUHJpdmFjeSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJSZXNwZWN0IG90aGVycycgcHJpdmFjeS4gRG8gbm90IHNoYXJlIHBlcnNvbmFsIGluZm9ybWF0aW9uIHdpdGhvdXQgcGVybWlzc2lvbi4iCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBSdWxlU2VjdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICI1LiBJbnRlbGxlY3R1YWwgUHJvcGVydHkiLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiRG8gbm90IHBvc3QgY29weXJpZ2h0ZWQgbWF0ZXJpYWwgd2l0aG91dCBwZXJtaXNzaW9uLiBHaXZlIGNyZWRpdCB3aGVyZSBjcmVkaXQgaXMgZHVlLiIKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgIFJ1bGVTZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIjYuIE1vZGVyYXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiTW9kZXJhdG9ycyBoYXZlIHRoZSBmaW5hbCBzYXkgaW4gZGlzcHV0ZXMuIEZvbGxvdyB0aGVpciBpbnN0cnVjdGlvbnMgYW5kIHJlc3BlY3QgdGhlaXIgZGVjaXNpb25zLiIKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgIFJ1bGVTZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIjcuIEFjY291bnQgUmVzcG9uc2liaWxpdHkiLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiWW91IGFyZSByZXNwb25zaWJsZSBmb3IgeW91ciBhY2NvdW50IGFuZCBhbGwgY29udGVudCBwb3N0ZWQgdW5kZXIgaXQuIEtlZXAgeW91ciBhY2NvdW50IHNlY3VyZS4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIFRleHQoIlZpb2xhdGlvbiBvZiB0aGVzZSBydWxlcyBtYXkgcmVzdWx0IGluIHdhcm5pbmdzLCB0ZW1wb3Jhcnkgc3VzcGVuc2lvbiwgb3IgcGVybWFuZW50IGJhbiBmcm9tIHRoZSBmb3J1bS4iKQogICAgICAgICAgICAgICAgICAgIC5mb250KC5zdWJoZWFkbGluZSkKICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZENvbG9yKC5zZWNvbmRhcnkpCiAgICAgICAgICAgICAgICAgICAgLnBhZGRpbmcoLnRvcCkKICAgICAgICAgICAgfQogICAgICAgICAgICAucGFkZGluZygpCiAgICAgICAgfQogICAgfQp9CgpzdHJ1Y3QgUnVsZVNlY3Rpb246IFZpZXcgewogICAgbGV0IHRpdGxlOiBTdHJpbmcKICAgIGxldCBjb250ZW50OiBTdHJpbmcKCiAgICB2YXIgYm9keTogc29tZSBWaWV3IHsKICAgICAgICBWU3RhY2soYWxpZ25tZW50OiAubGVhZGluZywgc3BhY2luZzogOCkgewogICAgICAgICAgICBUZXh0KHRpdGxlKQogICAgICAgICAgICAgICAgLmZvbnQoLmhlYWRsaW5lKQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvcigucHJpbWFyeSkKCiAgICAgICAgICAgIFRleHQoY29udGVudCkKICAgICAgICAgICAgICAgIC5mb250KC5ib2R5KQogICAgICAgICAgICAgICAgLmZvcmVncm91bmRDb2xvciguc2Vjb25kYXJ5KQogICAgICAgIH0KICAgIH0KfQoKI1ByZXZpZXcgewogICAgRm9ydW1FeHRlbnNpb25zVmlldygpCiAgICAgICAgLmVudmlyb25tZW50T2JqZWN0KENsb3VkS2l0TWFuYWdlci5zaGFyZWQpCn0K
--- END ---

--- FILE: MacChan/Views/NewThreadView.swift ---
BASE64: 
--- END ---

--- FILE: MacChan/Views/Forum+NSFW.swift ---
BASE64: aW1wb3J0IEZvdW5kYXRpb24KCmV4dGVuc2lvbiBGb3J1bSB7CiAgICAvLy8gU3R1YiBwcm9wZXJ0eTogcmV0dXJucyB0cnVlIGZvciBmb3J1bXMgd2l0aCAibnNmdyIgaW4gdGhlaXIgaWQgb3IgbmFtZSAoZm9yIGRlbW8pLgogICAgdmFyIGlzTlNGVzogQm9vbCB7CiAgICAgICAgaWQubG93ZXJjYXNlZCgpLmNvbnRhaW5zKCJuc2Z3IikgfHwKICAgICAgICBuYW1lLmxvd2VyY2FzZWQoKS5jb250YWlucygibnNmdyIpCiAgICB9Cn0K
--- END ---

--- FILE: MacChan/Views/MessageViews.swift ---
BASE64: 
--- END ---

--- FILE: MacChanUITests/MacChanUITestsLaunchTests.swift ---
BASE64: Ly8KLy8gIE1hY0NoYW5VSVRlc3RzTGF1bmNoVGVzdHMuc3dpZnQKLy8gIE1hY0NoYW5VSVRlc3RzCi8vCi8vICBDcmVhdGVkIGJ5IEphcmVkIE1heHdlbGwgb24gOS8zLzI1LgovLwoKaW1wb3J0IFhDVGVzdAoKZmluYWwgY2xhc3MgTWFjQ2hhblVJVGVzdHNMYXVuY2hUZXN0czogWENUZXN0Q2FzZSB7CgogICAgb3ZlcnJpZGUgY2xhc3MgdmFyIHJ1bnNGb3JFYWNoVGFyZ2V0QXBwbGljYXRpb25VSUNvbmZpZ3VyYXRpb246IEJvb2wgewogICAgICAgIHRydWUKICAgIH0KCiAgICBvdmVycmlkZSBmdW5jIHNldFVwV2l0aEVycm9yKCkgdGhyb3dzIHsKICAgICAgICBjb250aW51ZUFmdGVyRmFpbHVyZSA9IGZhbHNlCiAgICB9CgogICAgQE1haW5BY3RvcgogICAgZnVuYyB0ZXN0TGF1bmNoKCkgdGhyb3dzIHsKICAgICAgICBsZXQgYXBwID0gWENVSUFwcGxpY2F0aW9uKCkKICAgICAgICBhcHAubGF1bmNoKCkKCiAgICAgICAgLy8gSW5zZXJ0IHN0ZXBzIGhlcmUgdG8gcGVyZm9ybSBhZnRlciBhcHAgbGF1bmNoIGJ1dCBiZWZvcmUgdGFraW5nIGEgc2NyZWVuc2hvdCwKICAgICAgICAvLyBzdWNoIGFzIGxvZ2dpbmcgaW50byBhIHRlc3QgYWNjb3VudCBvciBuYXZpZ2F0aW5nIHNvbWV3aGVyZSBpbiB0aGUgYXBwCgogICAgICAgIGxldCBhdHRhY2htZW50ID0gWENUQXR0YWNobWVudChzY3JlZW5zaG90OiBhcHAuc2NyZWVuc2hvdCgpKQogICAgICAgIGF0dGFjaG1lbnQubmFtZSA9ICJMYXVuY2ggU2NyZWVuIgogICAgICAgIGF0dGFjaG1lbnQubGlmZXRpbWUgPSAua2VlcEFsd2F5cwogICAgICAgIGFkZChhdHRhY2htZW50KQogICAgfQp9Cg==
--- END ---

--- FILE: MacChanUITests/MacChanUITests.swift ---
BASE64: Ly8KLy8gIE1hY0NoYW5VSVRlc3RzLnN3aWZ0Ci8vICBNYWNDaGFuVUlUZXN0cwovLwovLyAgQ3JlYXRlZCBieSBKYXJlZCBNYXh3ZWxsIG9uIDkvMy8yNS4KLy8KCmltcG9ydCBYQ1Rlc3QKCmZpbmFsIGNsYXNzIE1hY0NoYW5VSVRlc3RzOiBYQ1Rlc3RDYXNlIHsKCiAgICBvdmVycmlkZSBmdW5jIHNldFVwV2l0aEVycm9yKCkgdGhyb3dzIHsKICAgICAgICAvLyBQdXQgc2V0dXAgY29kZSBoZXJlLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYmVmb3JlIHRoZSBpbnZvY2F0aW9uIG9mIGVhY2ggdGVzdCBtZXRob2QgaW4gdGhlIGNsYXNzLgoKICAgICAgICAvLyBJbiBVSSB0ZXN0cyBpdCBpcyB1c3VhbGx5IGJlc3QgdG8gc3RvcCBpbW1lZGlhdGVseSB3aGVuIGEgZmFpbHVyZSBvY2N1cnMuCiAgICAgICAgY29udGludWVBZnRlckZhaWx1cmUgPSBmYWxzZQoKICAgICAgICAvLyBJbiBVSSB0ZXN0cyBpdOKAmXMgaW1wb3J0YW50IHRvIHNldCB0aGUgaW5pdGlhbCBzdGF0ZSAtIHN1Y2ggYXMgaW50ZXJmYWNlIG9yaWVudGF0aW9uIC0gcmVxdWlyZWQgZm9yIHlvdXIgdGVzdHMgYmVmb3JlIHRoZXkgcnVuLiBUaGUgc2V0VXAgbWV0aG9kIGlzIGEgZ29vZCBwbGFjZSB0byBkbyB0aGlzLgogICAgfQoKICAgIG92ZXJyaWRlIGZ1bmMgdGVhckRvd25XaXRoRXJyb3IoKSB0aHJvd3MgewogICAgICAgIC8vIFB1dCB0ZWFyZG93biBjb2RlIGhlcmUuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhZnRlciB0aGUgaW52b2NhdGlvbiBvZiBlYWNoIHRlc3QgbWV0aG9kIGluIHRoZSBjbGFzcy4KICAgIH0KCiAgICBATWFpbkFjdG9yCiAgICBmdW5jIHRlc3RFeGFtcGxlKCkgdGhyb3dzIHsKICAgICAgICAvLyBVSSB0ZXN0cyBtdXN0IGxhdW5jaCB0aGUgYXBwbGljYXRpb24gdGhhdCB0aGV5IHRlc3QuCiAgICAgICAgbGV0IGFwcCA9IFhDVUlBcHBsaWNhdGlvbigpCiAgICAgICAgYXBwLmxhdW5jaCgpCgogICAgICAgIC8vIFVzZSBYQ1RBc3NlcnQgYW5kIHJlbGF0ZWQgZnVuY3Rpb25zIHRvIHZlcmlmeSB5b3VyIHRlc3RzIHByb2R1Y2UgdGhlIGNvcnJlY3QgcmVzdWx0cy4KICAgIH0KCiAgICBATWFpbkFjdG9yCiAgICBmdW5jIHRlc3RMYXVuY2hQZXJmb3JtYW5jZSgpIHRocm93cyB7CiAgICAgICAgLy8gVGhpcyBtZWFzdXJlcyBob3cgbG9uZyBpdCB0YWtlcyB0byBsYXVuY2ggeW91ciBhcHBsaWNhdGlvbi4KICAgICAgICBtZWFzdXJlKG1ldHJpY3M6IFtYQ1RBcHBsaWNhdGlvbkxhdW5jaE1ldHJpYygpXSkgewogICAgICAgICAgICBYQ1VJQXBwbGljYXRpb24oKS5sYXVuY2goKQogICAgICAgIH0KICAgIH0KfQo=
--- END ---

--- FILE: MacChanTests/MacChanTests.swift ---
BASE64: Ly8KLy8gIE1hY0NoYW5UZXN0cy5zd2lmdAovLyAgTWFjQ2hhblRlc3RzCi8vCi8vICBDcmVhdGVkIGJ5IEphcmVkIE1heHdlbGwgb24gOS8zLzI1LgovLwoKaW1wb3J0IFhDVGVzdAoKZmluYWwgY2xhc3MgTWFjQ2hhblRlc3RzOiBYQ1Rlc3RDYXNlIHsKCiAgICBvdmVycmlkZSBmdW5jIHNldFVwV2l0aEVycm9yKCkgdGhyb3dzIHsKICAgICAgICAvLyBQdXQgc2V0dXAgY29kZSBoZXJlLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYmVmb3JlIHRoZSBpbnZvY2F0aW9uIG9mIGVhY2ggdGVzdCBtZXRob2QgaW4gdGhlIGNsYXNzLgogICAgfQoKICAgIG92ZXJyaWRlIGZ1bmMgdGVhckRvd25XaXRoRXJyb3IoKSB0aHJvd3MgewogICAgICAgIC8vIFB1dCB0ZWFyZG93biBjb2RlIGhlcmUuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhZnRlciB0aGUgaW52b2NhdGlvbiBvZiBlYWNoIHRlc3QgbWV0aG9kIGluIHRoZSBjbGFzcy4KICAgIH0KCiAgICBmdW5jIHRlc3RFeGFtcGxlKCkgdGhyb3dzIHsKICAgICAgICAvLyBUaGlzIGlzIGFuIGV4YW1wbGUgb2YgYSBmdW5jdGlvbmFsIHRlc3QgY2FzZS4KICAgICAgICAvLyBVc2UgWENUQXNzZXJ0IGFuZCByZWxhdGVkIGZ1bmN0aW9ucyB0byB2ZXJpZnkgeW91ciB0ZXN0cyBwcm9kdWNlIHRoZSBjb3JyZWN0IHJlc3VsdHMuCiAgICAgICAgLy8gQW55IHRlc3QgeW91IHdyaXRlIGZvciBYQ1Rlc3QgY2FuIGJlIGFubm90YXRlZCBhcyB0aHJvd3MgYW5kIGFzeW5jLgogICAgICAgIC8vIE1hcmsgeW91ciB0ZXN0IHRocm93cyB0byBwcm9kdWNlIGFuIHVuZXhwZWN0ZWQgZmFpbHVyZSB3aGVuIHlvdXIgdGVzdCBlbmNvdW50ZXJzIGFuIHVuY2F1Z2h0IGVycm9yLgogICAgICAgIC8vIE1hcmsgeW91ciB0ZXN0IGFzeW5jIHRvIGFsbG93IGF3YWl0aW5nIGZvciBhc3luY2hyb25vdXMgY29kZSB0byBjb21wbGV0ZS4gQ2hlY2sgdGhlIHJlc3VsdHMgd2l0aCBhc3NlcnRpb25zIGFmdGVyd2FyZHMuCiAgICB9CgogICAgZnVuYyB0ZXN0UGVyZm9ybWFuY2VFeGFtcGxlKCkgdGhyb3dzIHsKICAgICAgICAvLyBUaGlzIGlzIGFuIGV4YW1wbGUgb2YgYSBwZXJmb3JtYW5jZSB0ZXN0IGNhc2UuCiAgICAgICAgbWVhc3VyZSB7CiAgICAgICAgICAgIC8vIFB1dCB0aGUgY29kZSB5b3Ugd2FudCB0byBtZWFzdXJlIHRoZSB0aW1lIG9mIGhlcmUuCiAgICAgICAgfQogICAgfQoKfQo=
--- END ---

